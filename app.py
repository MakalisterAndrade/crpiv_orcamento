from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, make_response, Response, abort
from models import db, Orcamento, Distribuicao, Missao, ComplementacaoOrcamento, MovimentacaoOrcamentaria, ResolucaoSemSaldo, RecolhimentoSaldo
from config import Config
import sqlite3
from datetime import datetime, date
import calendar
import pandas as pd
import io
import csv  
from werkzeug.utils import secure_filename
import os
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from sqlalchemy import or_ 
from dotenv import load_dotenv

# Carrega vari√°veis do arquivo .env na vari√°vel de ambiente do sistema
load_dotenv()


app = Flask(__name__)
app.config.from_object(Config)

app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB m√°ximo

# Criar pasta de uploads se n√£o existir
if not os.path.exists('uploads'):
    os.makedirs('uploads')


@app.route('/exportar_movimentacoes_pdf')
def exportar_movimentacoes_pdf():
    """Exportar movimenta√ß√µes para PDF"""
    try:
        # Buscar movimenta√ß√µes
        movimentacoes = MovimentacaoOrcamentaria.query.order_by(
            MovimentacaoOrcamentaria.data_movimentacao.desc()
        ).all()
        
        # Criar buffer para o PDF
        buffer = io.BytesIO()
        
        # Configurar documento
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        
        # Estilos
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#1f4e79')
        )
        
        subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.grey
        )
        
        # Elementos do documento
        elements = []
        
        # Cabe√ßalho
        elements.append(Paragraph("RELAT√ìRIO DE MOVIMENTA√á√ïES OR√áAMENT√ÅRIAS", title_style))
        elements.append(Paragraph(f"CRPIV - Comando Regional de Pol√≠cia IV", subtitle_style))
        elements.append(Paragraph(f"Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}", subtitle_style))
        elements.append(Spacer(1, 20))
        
        # Resumo estat√≠stico
        total_movimentacoes = len(movimentacoes)
        valor_total = sum([m.valor for m in movimentacoes if m.valor])
        
        resumo_data = [
            ['RESUMO EXECUTIVO', ''],
            ['Total de Movimenta√ß√µes:', f'{total_movimentacoes:,}'],
            ['Valor Total Movimentado:', f'R$ {valor_total:,.2f}'.replace('.', ',')],
            ['Per√≠odo:', f'{movimentacoes[-1].data_movimentacao.strftime("%d/%m/%Y") if movimentacoes else "N/A"} a {movimentacoes[0].data_movimentacao.strftime("%d/%m/%Y") if movimentacoes else "N/A"}']
        ]
        
        resumo_table = Table(resumo_data, colWidths=[3*inch, 2*inch])
        resumo_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1f4e79')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ]))
        
        elements.append(resumo_table)
        elements.append(Spacer(1, 30))
        
        # Tabela principal de movimenta√ß√µes
        if movimentacoes:
            # Cabe√ßalho da tabela
            data = [['Data', 'Tipo', 'Descri√ß√£o', 'Origem', 'Destino', 'Tipo Or√ß.', 'Valor', 'Usu√°rio']]
            
            # Dados das movimenta√ß√µes
            for mov in movimentacoes:
                data.append([
                    mov.data_movimentacao.strftime('%d/%m/%Y\n%H:%M'),
                    mov.tipo.replace('_', ' ').title(),
                    (mov.descricao or '')[:30] + ('...' if len(mov.descricao or '') > 30 else ''),
                    mov.unidade_origem or '-',
                    mov.unidade_destino or '-',
                    mov.tipo_orcamento or '-',
                    f'R$ {mov.valor:,.2f}'.replace('.', ',') if mov.valor else '-',
                    mov.usuario[:10] + ('...' if len(mov.usuario) > 10 else '')
                ])
            
            # Criar tabela
            table = Table(data, colWidths=[0.8*inch, 1.2*inch, 1.8*inch, 0.8*inch, 0.8*inch, 0.7*inch, 0.9*inch, 0.8*inch])
            
            # Estilo da tabela
            table.setStyle(TableStyle([
                # Cabe√ßalho
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1f4e79')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 8),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                
                # Corpo da tabela
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 7),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                
                # Zebrar linhas
                ('BACKGROUND', (0, 1), (-1, -1), colors.white),
            ]))
            
            # Aplicar zebra nas linhas
            for i in range(1, len(data)):
                if i % 2 == 0:
                    table.setStyle(TableStyle([
                        ('BACKGROUND', (0, i), (-1, i), colors.lightgrey)
                    ]))
            
            elements.append(Paragraph("DETALHAMENTO DAS MOVIMENTA√á√ïES", styles['Heading2']))
            elements.append(Spacer(1, 10))
            elements.append(table)
            
        else:
            elements.append(Paragraph("Nenhuma movimenta√ß√£o encontrada.", styles['Normal']))
        
        # Rodap√©
        elements.append(Spacer(1, 30))
        elements.append(Paragraph("___" * 30, styles['Normal']))
        elements.append(Paragraph(
            f"Relat√≥rio gerado automaticamente pelo Sistema CRPIV em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}",
            ParagraphStyle('Footer', parent=styles['Normal'], fontSize=8, alignment=TA_CENTER, textColor=colors.grey)
        ))
        
        # Gerar PDF
        doc.build(elements)
        
        # Preparar resposta
        buffer.seek(0)
        
        return Response(
            buffer.getvalue(),
            mimetype='application/pdf',
            headers={
                'Content-Disposition': f'attachment; filename=relatorio_movimentacoes_{datetime.now().strftime("%Y%m%d_%H%M")}.pdf'
            }
        )
        
    except Exception as e:
        print(f"‚ùå Erro na exporta√ß√£o PDF: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao exportar relat√≥rio em PDF', 'error')
        return redirect(url_for('relatorio_movimentacoes'))


@app.route('/exportar_pdf')
def exportar_pdf():
    """Exportar relat√≥rios em PDF - VERS√ÉO UNIFICADA"""
    try:
        tipo = request.args.get('tipo', 'orcamento')
        
        print(f"üîç Exportando PDF - Tipo: {tipo}")
        
        # ‚úÖ ROTEAMENTO POR TIPO DE RELAT√ìRIO
        if tipo == 'orcamento':
            return exportar_relatorio_orcamentario_pdf()
        elif tipo == 'missoes':
            return exportar_missoes_pdf()
        elif tipo == 'movimentacoes':
            return exportar_movimentacoes_pdf()
        elif tipo == 'unidade':
            return exportar_relatorio_unidade_pdf()
        else:
            flash(f'Tipo de relat√≥rio "{tipo}" n√£o reconhecido', 'error')
            return redirect(url_for('relatorios'))
            
    except Exception as e:
        print(f"‚ùå Erro na exporta√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao exportar relat√≥rio', 'error')
        return redirect(url_for('relatorios'))

def exportar_relatorio_orcamentario_pdf():
    """Exportar relat√≥rio or√ßament√°rio em PDF - SEU C√ìDIGO ATUAL"""
    try:
        unidade_filtro = request.args.get('unidade', '')
        
        # Buscar dados para o relat√≥rio
        dados = preparar_dados_relatorio(unidade_filtro)
        
        # Criar buffer para o PDF
        buffer = io.BytesIO()
        
        # Configurar documento
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        
        elements = []
        styles = getSampleStyleSheet()
        
        # T√≠tulo
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#1f4e79')
        )
        
        elements.append(Paragraph("RELAT√ìRIO OR√áAMENT√ÅRIO CONSOLIDADO", title_style))
        elements.append(Paragraph(f"CRPIV - Comando Regional de Pol√≠cia IV", 
                                ParagraphStyle('Sub', parent=styles['Normal'], fontSize=10, alignment=TA_CENTER, textColor=colors.grey)))
        
        if unidade_filtro:
            elements.append(Paragraph(f"Filtro aplicado: {unidade_filtro}", 
                                    ParagraphStyle('Filter', parent=styles['Normal'], fontSize=10, alignment=TA_CENTER, textColor=colors.red)))
        
        elements.append(Paragraph(f"Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}", 
                                ParagraphStyle('Date', parent=styles['Normal'], fontSize=10, alignment=TA_CENTER, textColor=colors.grey)))
        elements.append(Spacer(1, 30))
        
        # Resumo Financeiro
        resumo_data = [
            ['RESUMO FINANCEIRO', ''],
            ['Total Or√ßamento:', f'R$ {sum(dados["tipos_valores"]):,.2f}'.replace('.', ',')],
            ['Total Previs√µes:', f'R$ {dados["status_valores"][0]:,.2f}'.replace('.', ',')],
            ['Total Autorizadas:', f'R$ {dados["status_valores"][1]:,.2f}'.replace('.', ',')],
            ['Dispon√≠vel:', f'R$ {(sum(dados["tipos_valores"]) - dados["status_valores"][1]):,.2f}'.replace('.', ',')]
        ]
        
        resumo_table = Table(resumo_data, colWidths=[3*inch, 2*inch])
        resumo_table.setStyle(get_table_style_header())  # ‚úÖ Usar fun√ß√£o helper
        
        elements.append(resumo_table)
        elements.append(Spacer(1, 30))
        
        # Or√ßamento por Tipo
        tipo_data = [['OR√áAMENTO POR TIPO', 'VALOR']]
        for i, tipo in enumerate(dados['tipos_orcamento']):
            tipo_data.append([tipo, f'R$ {dados["tipos_valores"][i]:,.2f}'.replace('.', ',')])
        
        tipo_table = Table(tipo_data, colWidths=[3*inch, 2*inch])
        tipo_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#28a745')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgreen),
        ]))
        
        elements.append(tipo_table)
        elements.append(Spacer(1, 30))
        
        # Gastos por Unidade
        if dados['unidades']:
            unidade_data = [['GASTOS POR UNIDADE', 'VALOR']]
            for i, unidade in enumerate(dados['unidades']):
                unidade_data.append([unidade, f'R$ {dados["gastos_unidade"][i]:,.2f}'.replace('.', ',')])
            
            unidade_table = Table(unidade_data, colWidths=[3*inch, 2*inch])
            unidade_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#007bff')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightblue),
            ]))
            
            elements.append(unidade_table)
        
        # Rodap√©
        elements.append(Spacer(1, 30))
        elements.append(Paragraph("___" * 30, styles['Normal']))
        elements.append(Paragraph(
            f"Relat√≥rio gerado automaticamente pelo Sistema CRPIV em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}",
            ParagraphStyle('Footer', parent=styles['Normal'], fontSize=8, alignment=TA_CENTER, textColor=colors.grey)
        ))
        
        # Gerar PDF
        doc.build(elements)
        buffer.seek(0)
        
        filtro_nome = f"_{unidade_filtro.replace(' ', '_')}" if unidade_filtro else "_geral"
        
        return Response(
            buffer.getvalue(),
            mimetype='application/pdf',
            headers={
                'Content-Disposition': f'attachment; filename=relatorio_orcamentario{filtro_nome}_{datetime.now().strftime("%Y%m%d_%H%M")}.pdf'
            }
        )
        
    except Exception as e:
        print(f"‚ùå Erro na exporta√ß√£o PDF or√ßament√°rio: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao exportar relat√≥rio or√ßament√°rio em PDF', 'error')
        return redirect(url_for('relatorios'))

def exportar_missoes_pdf():
    """Exportar miss√µes para PDF separadas por unidades"""
    try:
        # Buscar filtros
        omp_filtro = request.args.get('omp_filtro', '')
        fonte_filtro = request.args.get('fonte_filtro', '')
        
        print(f"üîç Exportando PDF de miss√µes - Filtros: OMP='{omp_filtro}', Fonte='{fonte_filtro}'")
        
        # Buscar miss√µes com filtros
        query = Missao.query
        
        if omp_filtro:
            query = query.filter(Missao.opm_destino == omp_filtro)
        
        if fonte_filtro:
            query = query.filter(Missao.fonte_dinheiro == fonte_filtro)
        
        missoes = query.order_by(Missao.fonte_dinheiro, Missao.status.desc(), Missao.data_criacao.desc()).all()
        
        print(f"üìã {len(missoes)} miss√µes encontradas para exporta√ß√£o")
        
        # Organizar miss√µes por unidade
        missoes_por_unidade = {}
        for missao in missoes:
            unidade = missao.fonte_dinheiro
            if unidade not in missoes_por_unidade:
                missoes_por_unidade[unidade] = {
                    'previsao': [],
                    'autorizada': [],
                    'total_previsao': 0,
                    'total_autorizada': 0,
                    'total_geral': 0
                }
            
            missoes_por_unidade[unidade][missao.status].append(missao)
            
            if missao.status == 'previsao':
                missoes_por_unidade[unidade]['total_previsao'] += missao.valor
            else:
                missoes_por_unidade[unidade]['total_autorizada'] += missao.valor
            
            missoes_por_unidade[unidade]['total_geral'] += missao.valor
        
        # Criar buffer para o PDF
        buffer = io.BytesIO()
        
        # Configurar documento
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=50,
            leftMargin=50,
            topMargin=72,
            bottomMargin=18
        )
        
        elements = []
        styles = getSampleStyleSheet()
        
        # T√≠tulo
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#1f4e79'),
            fontName='Helvetica-Bold'
        )
        
        elements.append(Paragraph("RELAT√ìRIO DE MISS√ïES POR UNIDADE", title_style))
        elements.append(Paragraph("CRPIV - Comando Regional de Pol√≠cia IV", 
                                ParagraphStyle('Sub', parent=styles['Normal'], fontSize=11, alignment=TA_CENTER, textColor=colors.grey)))
        
        # Informa√ß√µes dos filtros
        filtro_info = []
        if omp_filtro:
            filtro_info.append(f"OPM Destino: {omp_filtro}")
        if fonte_filtro:
            filtro_info.append(f"Fonte: {fonte_filtro}")
        
        if filtro_info:
            elements.append(Paragraph(f"Filtros aplicados: {' | '.join(filtro_info)}", 
                                    ParagraphStyle('Filter', parent=styles['Normal'], fontSize=11, alignment=TA_CENTER, textColor=colors.grey)))
        
        elements.append(Paragraph(f"Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}", 
                                ParagraphStyle('Date', parent=styles['Normal'], fontSize=11, alignment=TA_CENTER, textColor=colors.grey)))
        elements.append(Spacer(1, 20))
        
        # Resumo executivo
        total_missoes = len(missoes)
        total_previsoes = sum([m.valor for m in missoes if m.status == 'previsao'])
        total_autorizadas = sum([m.valor for m in missoes if m.status == 'autorizada'])
        total_geral = total_previsoes + total_autorizadas
        
        resumo_data = [
            ['RESUMO EXECUTIVO', ''],
            ['Total de Miss√µes:', f'{total_missoes:,}'],
            ['Total em Previs√£o:', f'R$ {total_previsoes:,.2f}'.replace('.', ',')],
            ['Total Autorizada:', f'R$ {total_autorizadas:,.2f}'.replace('.', ',')],
            ['Valor Total Geral:', f'R$ {total_geral:,.2f}'.replace('.', ',')],
            ['Unidades Envolvidas:', f'{len(missoes_por_unidade)} unidade(s)']
        ]
        
        resumo_table = Table(resumo_data, colWidths=[3.5*inch, 2.5*inch])
        resumo_table.setStyle(get_table_style_header())  # ‚úÖ Usar fun√ß√£o helper
        
        elements.append(resumo_table)
        elements.append(Spacer(1, 30))
        
        # Miss√µes por unidade
        unidade_style = ParagraphStyle(
            'UnidadeTitle',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=15,
            spaceBefore=20,
            textColor=colors.HexColor('#2c5aa0'),
            fontName='Helvetica-Bold'
        )
        
        for unidade, dados in missoes_por_unidade.items():
            # T√≠tulo da unidade
            elements.append(Paragraph(f"üìç {unidade}", unidade_style))
            
            # Resumo da unidade
            unidade_resumo = [
                ['Resumo da Unidade', 'Quantidade', 'Valor Total'],
                ['Miss√µes em Previs√£o', f"{len(dados['previsao'])}", f"R$ {dados['total_previsao']:,.2f}".replace('.', ',')],
                ['Miss√µes Autorizadas', f"{len(dados['autorizada'])}", f"R$ {dados['total_autorizada']:,.2f}".replace('.', ',')],
                ['TOTAL DA UNIDADE', f"{len(dados['previsao']) + len(dados['autorizada'])}", f"R$ {dados['total_geral']:,.2f}".replace('.', ',')]
            ]
            
            unidade_resumo_table = Table(unidade_resumo, colWidths=[3*inch, 1.5*inch, 2*inch])
            unidade_resumo_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2c5aa0')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
                ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
            ]))
            
            elements.append(unidade_resumo_table)
            elements.append(Spacer(1, 15))
            
            # Tabelas de miss√µes (autorizadas e previs√µes)
            if dados['autorizada']:
                elements.append(Paragraph(f"‚úÖ Miss√µes Autorizadas ({len(dados['autorizada'])})", 
                                       ParagraphStyle('SubTitle', parent=styles['Normal'], fontSize=12, 
                                                    textColor=colors.HexColor('#28a745'), fontName='Helvetica-Bold')))
                
                auth_data = [['OPM Destino', 'Descri√ß√£o', 'Tipo', 'Per√≠odo', 'Valor']]
                
                for missao in dados['autorizada']:
                    auth_data.append([
                        missao.opm_destino,
                        (missao.descricao or '')[:35] + ('...' if len(missao.descricao or '') > 35 else ''),
                        missao.tipo,
                        missao.periodo or '-',
                        f'R$ {missao.valor:,.2f}'.replace('.', ',')
                    ])
                
                auth_table = Table(auth_data, colWidths=[1.2*inch, 2.3*inch, 1*inch, 1*inch, 1*inch])
                auth_table.setStyle(create_missoes_table_style('#28a745', colors.lightgreen))
                
                elements.append(auth_table)
                elements.append(Spacer(1, 10))
            
            if dados['previsao']:
                elements.append(Paragraph(f"‚è≥ Miss√µes em Previs√£o ({len(dados['previsao'])})", 
                                       ParagraphStyle('SubTitle', parent=styles['Normal'], fontSize=12, 
                                                    textColor=colors.HexColor('#ffc107'), fontName='Helvetica-Bold')))
                
                prev_data = [['OPM Destino', 'Descri√ß√£o', 'Tipo', 'Per√≠odo', 'Valor']]
                
                for missao in dados['previsao']:
                    prev_data.append([
                        missao.opm_destino,
                        (missao.descricao or '')[:35] + ('...' if len(missao.descricao or '') > 35 else ''),
                        missao.tipo,
                        missao.periodo or '-',
                        f'R$ {missao.valor:,.2f}'.replace('.', ',')
                    ])
                
                prev_table = Table(prev_data, colWidths=[1.2*inch, 2.3*inch, 1*inch, 1*inch, 1*inch])
                prev_table.setStyle(create_missoes_table_style('#ffc107', colors.lightyellow))
                
                elements.append(prev_table)
                elements.append(Spacer(1, 10))
            
            elements.append(Spacer(1, 20))
        
        # Rodap√©
        elements.append(Spacer(1, 30))
        elements.append(Paragraph("_" * 80, ParagraphStyle('Line', parent=styles['Normal'], fontSize=8, alignment=TA_CENTER)))
        elements.append(Paragraph(
            f"Relat√≥rio gerado automaticamente pelo Sistema CRPIV em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}",
            ParagraphStyle('Footer', parent=styles['Normal'], fontSize=8, alignment=TA_CENTER, textColor=colors.grey)
        ))
        
        # Gerar PDF
        doc.build(elements)
        buffer.seek(0)
        
        # Nome do arquivo com filtros
        nome_arquivo = "missoes_por_unidade"
        if fonte_filtro:
            nome_arquivo += f"_{fonte_filtro.replace(' ', '_')}"
        if omp_filtro:
            nome_arquivo += f"_destino_{omp_filtro.replace(' ', '_')}"
        nome_arquivo += f"_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
        
        print(f"‚úÖ PDF gerado: {nome_arquivo}")
        
        return Response(
            buffer.getvalue(),
            mimetype='application/pdf',
            headers={
                'Content-Disposition': f'attachment; filename={nome_arquivo}'
            }
        )
        
    except Exception as e:
        print(f"‚ùå Erro na exporta√ß√£o PDF de miss√µes: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao exportar relat√≥rio de miss√µes em PDF', 'error')
        return redirect(url_for('missoes'))


def preparar_dados_relatorio(unidade_filtro=''):
    """Prepara dados para o relat√≥rio"""
    try:
        # Usar or√ßamento total de todos os bimestres
        totais_geral = calcular_orcamento_total_todos_bimestres()
        tipos_valores = [
            totais_geral['diarias'],
            totais_geral['derso'],
            totais_geral['diarias_pav'],
            totais_geral['derso_pav']
        ]
        
        # Gr√°fico por unidade (gastos autorizados) - com filtro
        gastos_unidade = {}
        for unidade in UNIDADES:
            if unidade_filtro and unidade != unidade_filtro:
                continue
                
            total_gasto = db.session.query(Missao).filter_by(
                fonte_dinheiro=unidade, 
                status='autorizada'
            ).with_entities(db.func.sum(Missao.valor)).scalar() or 0
            gastos_unidade[unidade] = total_gasto
        
        # Gr√°fico por status - considerando filtro de unidade
        query_previsoes = db.session.query(Missao).filter_by(status='previsao')
        query_autorizadas = db.session.query(Missao).filter_by(status='autorizada')
        
        if unidade_filtro:
            query_previsoes = query_previsoes.filter(Missao.fonte_dinheiro == unidade_filtro)
            query_autorizadas = query_autorizadas.filter(Missao.fonte_dinheiro == unidade_filtro)
        
        total_previsoes = query_previsoes.with_entities(db.func.sum(Missao.valor)).scalar() or 0
        total_autorizadas = query_autorizadas.with_entities(db.func.sum(Missao.valor)).scalar() or 0
        
        return {
            'tipos_orcamento': TIPOS_ORCAMENTO,
            'tipos_valores': tipos_valores,
            'unidades': list(gastos_unidade.keys()),
            'gastos_unidade': list(gastos_unidade.values()),
            'status_labels': ['Previs√µes', 'Autorizadas'],
            'status_valores': [total_previsoes, total_autorizadas],
            'unidade_filtro': unidade_filtro
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao preparar dados: {e}")
        return {
            'tipos_orcamento': TIPOS_ORCAMENTO,
            'tipos_valores': [0, 0, 0, 0],
            'unidades': [],
            'gastos_unidade': [],
            'status_labels': ['Previs√µes', 'Autorizadas'],
            'status_valores': [0, 0],
            'unidade_filtro': unidade_filtro
        }
    

def verificar_saldo_disponivel_missao(missao):
    """Verifica se h√° saldo dispon√≠vel para autorizar uma miss√£o - VERS√ÉO CORRIGIDA"""
    try:
        print(f"üîç Verificando saldo para miss√£o: {missao.fonte_dinheiro} - {missao.tipo} - R$ {missao.valor:,.2f}")
        
        if missao.fonte_dinheiro == 'CRPIV':
            # ‚úÖ MISS√ÉO DO CRPIV - Verificar saldo n√£o distribu√≠do
            saldo_crpiv = calcular_saldo_disponivel_crpiv(missao.tipo)
            
            print(f"üí∞ Saldo CRPIV dispon√≠vel para {missao.tipo}: R$ {saldo_crpiv:,.2f}")
            
            if saldo_crpiv >= missao.valor:
                return {
                    'pode_autorizar': True,
                    'saldo_disponivel': saldo_crpiv,
                    'deficit': 0
                }
            else:
                return {
                    'pode_autorizar': False,
                    'saldo_disponivel': saldo_crpiv,
                    'deficit': missao.valor - saldo_crpiv
                }
        else:
            # ‚úÖ MISS√ÉO DE SUBUNIDADE - Verificar saldo distribu√≠do
            # Total distribu√≠do para esta unidade/tipo
            distribuido = db.session.query(
                db.func.sum(Distribuicao.valor)
            ).filter(
                Distribuicao.unidade == missao.fonte_dinheiro,
                Distribuicao.tipo_orcamento == missao.tipo
            ).scalar() or 0
            
            # Total j√° autorizado para esta unidade/tipo
            autorizado = db.session.query(
                db.func.sum(Missao.valor)
            ).filter(
                Missao.fonte_dinheiro == missao.fonte_dinheiro,
                Missao.tipo == missao.tipo,
                Missao.status == 'autorizada'
            ).scalar() or 0
            
            saldo_disponivel = distribuido - autorizado
            
            print(f"üìä An√°lise de saldo {missao.fonte_dinheiro} - {missao.tipo}:")
            print(f"   Distribu√≠do: R$ {distribuido:,.2f}")
            print(f"   J√° autorizado: R$ {autorizado:,.2f}")
            print(f"   Dispon√≠vel: R$ {saldo_disponivel:,.2f}")
            print(f"   Necess√°rio: R$ {missao.valor:,.2f}")
            
            if saldo_disponivel >= missao.valor:
                return {
                    'pode_autorizar': True,
                    'saldo_disponivel': saldo_disponivel,
                    'deficit': 0
                }
            else:
                return {
                    'pode_autorizar': False,
                    'saldo_disponivel': saldo_disponivel,
                    'deficit': missao.valor - saldo_disponivel
                }
                
    except Exception as e:
        print(f"‚ùå Erro ao verificar saldo: {e}")
        return {
            'pode_autorizar': False,
            'saldo_disponivel': 0,
            'deficit': missao.valor
        }



def buscar_opcoes_transferencia(missao, deficit):
    """Busca op√ß√µes de transfer√™ncia de outras unidades/tipos"""
    try:
        opcoes = []
        
        # Buscar saldos dispon√≠veis em outras unidades do mesmo tipo
        for unidade in UNIDADES:  # Excluir CRPIV
            if unidade == missao.fonte_dinheiro:
                continue
                
            # Calcular saldo desta unidade no mesmo tipo
            distribuido = db.session.query(
                db.func.sum(Distribuicao.valor)
            ).filter(
                Distribuicao.unidade == unidade,
                Distribuicao.tipo_orcamento == missao.tipo
            ).scalar() or 0
            
            autorizado = db.session.query(
                db.func.sum(Missao.valor)
            ).filter(
                Missao.fonte_dinheiro == unidade,
                Missao.tipo == missao.tipo,
                Missao.status == 'autorizada'
            ).scalar() or 0
            
            saldo_disponivel = distribuido - autorizado
            
            if saldo_disponivel >= deficit:
                opcoes.append({
                    'unidade': unidade,
                    'tipo': missao.tipo,
                    'saldo_disponivel': saldo_disponivel,
                    'valor_transferir': deficit,
                    'saldo_restante': saldo_disponivel - deficit
                })
        
        # Verificar se CRPIV tem saldo para nova distribui√ß√£o
        saldos_crpiv = calcular_saldos_para_distribuir()
        tipo_crpiv_map = {
            'DI√ÅRIAS': 'diarias',
            'DERSO': 'derso',
            'DI√ÅRIAS PAV': 'diarias_pav',
            'DERSO PAV': 'derso_pav'
        }
        
        saldo_crpiv = saldos_crpiv.get(tipo_crpiv_map.get(missao.tipo, ''), 0)
        
        opcoes_crpiv = {
            'tem_saldo': saldo_crpiv >= deficit,
            'saldo_disponivel': saldo_crpiv,
            'valor_necessario': deficit
        }
        
        return {
            'opcoes_transferencia': opcoes,
            'opcoes_crpiv': opcoes_crpiv,
            'total_opcoes': len(opcoes) + (1 if opcoes_crpiv['tem_saldo'] else 0)
        }
        
    except Exception as e:
        print(f"‚ùå Erro ao buscar op√ß√µes: {e}")
        return {'opcoes_transferencia': [], 'opcoes_crpiv': {'tem_saldo': False}, 'total_opcoes': 0}

def executar_transferencia_entre_unidades(unidade_origem, unidade_destino, tipo_orcamento, valor):
    """Executa transfer√™ncia de saldo entre unidades - VERS√ÉO CORRIGIDA"""
    try:
        print(f"üîÑ Executando transfer√™ncia: {unidade_origem} ‚Üí {unidade_destino} - {tipo_orcamento} - R$ {valor:,.2f}")
        
        # ‚úÖ VALIDA√á√ïES INICIAIS
        if valor <= 0:
            return {'sucesso': False, 'erro': 'Valor deve ser maior que zero'}
        
        if unidade_origem == unidade_destino:
            return {'sucesso': False, 'erro': 'Unidade origem n√£o pode ser igual √† unidade destino'}
        
        # ‚úÖ BUSCAR DISTRIBUI√á√ÉO DA UNIDADE ORIGEM
        distribuicao_origem = db.session.query(Distribuicao).filter_by(
            unidade=unidade_origem,
            tipo_orcamento=tipo_orcamento
        ).order_by(Distribuicao.data_distribuicao.desc()).first()
        
        if not distribuicao_origem:
            return {'sucesso': False, 'erro': f'Nenhuma distribui√ß√£o encontrada para {unidade_origem} - {tipo_orcamento}'}
        
        if distribuicao_origem.valor < valor:
            return {'sucesso': False, 'erro': f'Saldo insuficiente. Dispon√≠vel: R$ {distribuicao_origem.valor:,.2f}, Solicitado: R$ {valor:,.2f}'}
        
        print(f"‚úÖ Distribui√ß√£o origem encontrada: R$ {distribuicao_origem.valor:,.2f}")
        
        # ‚úÖ VERIFICAR SALDO REAL DISPON√çVEL (Distribu√≠do - Autorizado)
        autorizado_origem = db.session.query(
            db.func.sum(Missao.valor)
        ).filter(
            Missao.fonte_dinheiro == unidade_origem,
            Missao.tipo == tipo_orcamento,
            Missao.status == 'autorizada'
        ).scalar() or 0
        
        saldo_real_origem = distribuicao_origem.valor - autorizado_origem
        
        if saldo_real_origem < valor:
            return {'sucesso': False, 'erro': f'Saldo real insuficiente. Dispon√≠vel: R$ {saldo_real_origem:,.2f} (R$ {autorizado_origem:,.2f} j√° autorizados)'}
        
        print(f"‚úÖ Saldo real verificado: R$ {saldo_real_origem:,.2f}")
        
        # ‚úÖ REDUZIR VALOR DA UNIDADE ORIGEM
        valor_original_origem = distribuicao_origem.valor
        distribuicao_origem.valor -= valor
        
        print(f"üìâ Reduzindo distribui√ß√£o de {unidade_origem}:")
        print(f"   De: R$ {valor_original_origem:,.2f}")
        print(f"   Para: R$ {distribuicao_origem.valor:,.2f}")
        
        # ‚úÖ BUSCAR OU CRIAR DISTRIBUI√á√ÉO NA UNIDADE DESTINO
        distribuicao_destino = db.session.query(Distribuicao).filter_by(
            unidade=unidade_destino,
            tipo_orcamento=tipo_orcamento,
            orcamento_id=distribuicao_origem.orcamento_id
        ).first()
        
        if distribuicao_destino:
            valor_original_destino = distribuicao_destino.valor
            distribuicao_destino.valor += valor
            print(f"üìà Aumentando distribui√ß√£o de {unidade_destino}:")
            print(f"   De: R$ {valor_original_destino:,.2f}")
            print(f"   Para: R$ {distribuicao_destino.valor:,.2f}")
        else:
            # Criar nova distribui√ß√£o
            distribuicao_destino = Distribuicao(
                orcamento_id=distribuicao_origem.orcamento_id,
                unidade=unidade_destino,
                tipo_orcamento=tipo_orcamento,
                valor=valor,
                data_distribuicao=datetime.utcnow()
            )
            db.session.add(distribuicao_destino)
            print(f"‚úÖ Criando nova distribui√ß√£o para {unidade_destino}: R$ {valor:,.2f}")
        
        # ‚úÖ REGISTRAR MOVIMENTA√á√ÉO DE LOG
        registrar_movimentacao(
            tipo='transferencia_entre_unidades',
            descricao=f'Transfer√™ncia: {unidade_origem} ‚Üí {unidade_destino} ({tipo_orcamento})',
            unidade_origem=unidade_origem,
            unidade_destino=unidade_destino,
            tipo_orcamento=tipo_orcamento,
            valor=valor,
            orcamento_id=distribuicao_origem.orcamento_id
        )
        
        print(f"‚úÖ Transfer√™ncia preparada com sucesso!")
        
        return {
            'sucesso': True,
            'valor_transferido': valor,
            'saldo_origem_anterior': valor_original_origem,
            'saldo_origem_atual': distribuicao_origem.valor,
            'saldo_destino_anterior': valor_original_destino if distribuicao_destino else 0,
            'saldo_destino_atual': distribuicao_destino.valor
        }
        
    except Exception as e:
        print(f"‚ùå Erro na transfer√™ncia: {e}")
        import traceback
        traceback.print_exc()
        return {'sucesso': False, 'erro': str(e)}


def executar_nova_distribuicao_crpiv(unidade_destino, tipo_orcamento, valor):
    """Executa nova distribui√ß√£o do CRPIV para uma unidade"""
    try:
        print(f"üì§ Nova distribui√ß√£o: CRPIV ‚Üí {unidade_destino} - {tipo_orcamento} - R$ {valor:,.2f}")
        
        # Verificar se CRPIV tem saldo
        saldos_crpiv = calcular_saldos_para_distribuir()
        tipo_map = {
            'DI√ÅRIAS': 'diarias',
            'DERSO': 'derso',
            'DI√ÅRIAS PAV': 'diarias_pav',
            'DERSO PAV': 'derso_pav'
        }
        
        saldo_disponivel = saldos_crpiv.get(tipo_map.get(tipo_orcamento, ''), 0)
        
        if saldo_disponivel < valor:
            return {'sucesso': False, 'erro': f'CRPIV n√£o tem saldo suficiente. Dispon√≠vel: R$ {saldo_disponivel:,.2f}'}
        
        # Buscar or√ßamento mais recente (ou usar l√≥gica espec√≠fica)
        orcamento_atual = Orcamento.query.order_by(Orcamento.data_criacao.desc()).first()
        
        if not orcamento_atual:
            return {'sucesso': False, 'erro': 'Nenhum or√ßamento encontrado'}
        
        # Buscar ou criar distribui√ß√£o
        distribuicao = Distribuicao.query.filter_by(
            orcamento_id=orcamento_atual.id,
            unidade=unidade_destino,
            tipo_orcamento=tipo_orcamento
        ).first()
        
        if distribuicao:
            distribuicao.valor += valor
        else:
            distribuicao = Distribuicao(
                orcamento_id=orcamento_atual.id,
                unidade=unidade_destino,
                tipo_orcamento=tipo_orcamento,
                valor=valor
            )
            db.session.add(distribuicao)
        
        # Registrar movimenta√ß√£o
        registrar_movimentacao(
            tipo='nova_distribuicao_crpiv',
            descricao=f'Nova distribui√ß√£o do CRPIV para viabilizar autoriza√ß√£o de miss√£o',
            unidade_origem='CRPIV',
            unidade_destino=unidade_destino,
            tipo_orcamento=tipo_orcamento,
            valor=valor,
            orcamento_id=orcamento_atual.id
        )
        
        return {'sucesso': True}
        
    except Exception as e:
        print(f"‚ùå Erro na nova distribui√ß√£o: {e}")
        return {'sucesso': False, 'erro': str(e)}

def registrar_movimentacao(tipo, descricao="", unidade_origem=None, unidade_destino=None, 
                          tipo_orcamento=None, valor=None, usuario=None, orcamento_id=None, missao_id=None):
    """Registra todas as movimenta√ß√µes or√ßament√°rias - VERS√ÉO COM DEBUG"""
    try:
        print(f"üîç TENTANDO REGISTRAR MOVIMENTA√á√ÉO:")
        print(f"   Tipo: {tipo}")
        print(f"   Descri√ß√£o: {descricao}")
        print(f"   Valor: {valor}")
        
        # ‚úÖ VERIFICAR SE A CLASSE EXISTE
        try:
            movimento = MovimentacaoOrcamentaria(
                tipo=tipo,
                descricao=descricao,
                unidade_origem=unidade_origem,
                unidade_destino=unidade_destino,
                tipo_orcamento=tipo_orcamento,
                valor=valor,
                usuario=usuario or "Sistema",
                orcamento_id=orcamento_id,
                missao_id=missao_id
            )
            print(f"‚úÖ Objeto MovimentacaoOrcamentaria criado com sucesso")
            
            db.session.add(movimento)
            print(f"‚úÖ Movimento adicionado √† sess√£o")
            
            db.session.commit()
            print(f"‚úÖ Movimento commitado no banco")
            
            # Verificar se foi salvo
            total_after = MovimentacaoOrcamentaria.query.count()
            print(f"üìä Total de registros ap√≥s insert: {total_after}")
            
            print(f"üìù Log registrado com sucesso: {tipo} - {descricao}")
            
        except Exception as db_error:
            print(f"‚ùå Erro ao salvar no banco: {db_error}")
            print(f"   Fazendo rollback...")
            db.session.rollback()
            
            # Tentar verificar o erro espec√≠fico
            import traceback
            traceback.print_exc()
            
    except Exception as e:
        print(f"‚ùå Erro geral ao registrar log: {e}")
        import traceback
        traceback.print_exc()


def debug_distribuicao_completo():
    """Fun√ß√£o para diagnosticar todos os problemas de distribui√ß√£o"""
    print("=" * 60)
    print("üîç DIAGN√ìSTICO COMPLETO DO SISTEMA DE DISTRIBUI√á√ÉO")
    print("=" * 60)
    
    try:
        # 1. Verificar or√ßamentos
        orcamentos = Orcamento.query.all()
        print(f"üìä Total de or√ßamentos: {len(orcamentos)}")
        
        total_geral = {'diarias': 0, 'derso': 0, 'diarias_pav': 0, 'derso_pav': 0}
        for orc in orcamentos:
            total_geral['diarias'] += orc.diarias or 0
            total_geral['derso'] += orc.derso or 0
            total_geral['diarias_pav'] += orc.diarias_pav or 0
            total_geral['derso_pav'] += orc.derso_pav or 0
        
        print("üí∞ Or√ßamento total base:")
        for tipo, valor in total_geral.items():
            print(f"  {tipo}: R$ {valor:,.2f}")
        
        # 2. Verificar complementa√ß√µes
        complementacoes = ComplementacaoOrcamento.query.all()
        print(f"üìà Total de complementa√ß√µes: {len(complementacoes)}")
        
        # 3. Verificar distribui√ß√µes
        distribuicoes = Distribuicao.query.all()
        print(f"üì§ Total de distribui√ß√µes: {len(distribuicoes)}")
        
        total_distribuido = sum([d.valor for d in distribuicoes])
        print(f"üí∏ Total distribu√≠do: R$ {total_distribuido:,.2f}")
        
        # 4. Verificar miss√µes
        missoes_prev = Missao.query.filter_by(status='previsao').all()
        missoes_aut = Missao.query.filter_by(status='autorizada').all()
        
        print(f"üìã Miss√µes em previs√£o: {len(missoes_prev)}")
        print(f"‚úÖ Miss√µes autorizadas: {len(missoes_aut)}")
        
        total_prev = sum([m.valor for m in missoes_prev])
        total_aut = sum([m.valor for m in missoes_aut])
        
        print(f"üí∞ Valor previs√µes: R$ {total_prev:,.2f}")
        print(f"üí∞ Valor autorizadas: R$ {total_aut:,.2f}")
        
        print("=" * 60)
        
        return {
            'status': 'OK',
            'orcamentos': len(orcamentos),
            'distribuicoes': len(distribuicoes),
            'missoes_autorizadas': len(missoes_aut)
        }
        
    except Exception as e:
        print(f"‚ùå Erro no diagn√≥stico: {e}")
        return {'status': 'ERRO', 'erro': str(e)}


@app.route('/autorizar_missao/<int:missao_id>')
def autorizar_missao(missao_id):
    """Autorizar miss√£o com valida√ß√£o de saldo e registro de distribui√ß√£o"""
    try:
        missao = db.session.get(Missao, missao_id)
        if not missao:
            flash('Miss√£o n√£o encontrada', 'error')
            return redirect(url_for('missoes'))
        
        if missao.status == 'autorizada':
            flash('Miss√£o j√° est√° autorizada', 'info')
            return redirect(url_for('missoes'))
        
        print(f"üîç Autorizando miss√£o {missao_id}: {missao.fonte_dinheiro} ‚Üí {missao.opm_destino} - R$ {missao.valor:,.2f}")
        
        # ‚úÖ VERIFICAR SALDO DISPON√çVEL
        analise_saldo = verificar_saldo_disponivel_missao(missao)
        
        if analise_saldo['pode_autorizar']:
            # ‚úÖ H√Å SALDO SUFICIENTE - AUTORIZAR E REGISTRAR DISTRIBUI√á√ÉO
            
            # 1. Autorizar a miss√£o
            missao.status = 'autorizada'
            missao.data_autorizacao = datetime.utcnow()
            
            # 2. ‚úÖ REGISTRAR DISTRIBUI√á√ÉO AUTOM√ÅTICA (NOVO)
            # Buscar or√ßamento mais recente para vincular
            orcamento_recente = Orcamento.query.order_by(Orcamento.data_criacao.desc()).first()
            
            if orcamento_recente:
                # Verificar se j√° existe distribui√ß√£o para essa fonte/tipo
                distribuicao_existente = Distribuicao.query.filter_by(
                    orcamento_id=orcamento_recente.id,
                    unidade=missao.fonte_dinheiro,  # ‚úÖ Pode ser CRPIV ou subunidade
                    tipo_orcamento=missao.tipo
                ).first()
                
                if distribuicao_existente:
                    # Aumentar valor da distribui√ß√£o existente
                    valor_anterior = distribuicao_existente.valor
                    distribuicao_existente.valor += missao.valor
                    distribuicao_existente.data_distribuicao = datetime.utcnow()
                    
                    print(f"üìà Atualizando distribui√ß√£o existente {missao.fonte_dinheiro}:")
                    print(f"   De: R$ {valor_anterior:,.2f}")
                    print(f"   Para: R$ {distribuicao_existente.valor:,.2f}")
                else:
                    # Criar nova distribui√ß√£o
                    nova_distribuicao = Distribuicao(
                        orcamento_id=orcamento_recente.id,
                        unidade=missao.fonte_dinheiro,  # ‚úÖ CRPIV ou subunidade
                        tipo_orcamento=missao.tipo,
                        valor=missao.valor,
                        data_distribuicao=datetime.utcnow()
                    )
                    db.session.add(nova_distribuicao)
                    
                    print(f"‚úÖ Criando nova distribui√ß√£o {missao.fonte_dinheiro}: R$ {missao.valor:,.2f}")
                
                # 3. ‚úÖ REGISTRAR LOG DE DISTRIBUI√á√ÉO
                registrar_movimentacao(
                    tipo='distribuicao',
                    descricao=f'Distribui√ß√£o autom√°tica: Miss√£o {missao.id} - {missao.fonte_dinheiro} ‚Üí {missao.omp_destino}',
                    unidade_origem='CRPIV' if missao.fonte_dinheiro != 'CRPIV' else 'Sistema',
                    unidade_destino=missao.fonte_dinheiro,
                    tipo_orcamento=missao.tipo,
                    valor=missao.valor,
                    orcamento_id=orcamento_recente.id,
                    missao_id=missao.id
                )
            
            # 4. ‚úÖ REGISTRAR LOG DE AUTORIZA√á√ÉO
            registrar_movimentacao(
                tipo='autorizacao_missao',
                descricao=f'Miss√£o autorizada: {missao.descricao[:50]}...',
                unidade_origem=missao.fonte_dinheiro,
                unidade_destino=missao.omp_destino,
                tipo_orcamento=missao.tipo,
                valor=missao.valor,
                missao_id=missao.id
            )
            
            db.session.commit()
            flash('‚úÖ Miss√£o autorizada com sucesso! Saldo ajustado automaticamente.', 'success')
            return redirect(url_for('missoes'))
            
        else:
            # ‚ùå N√ÉO H√Å SALDO SUFICIENTE - BUSCAR OP√á√ïES
            opcoes = buscar_opcoes_transferencia(missao, analise_saldo['deficit'])
            
            if opcoes['total_opcoes'] == 0:
                # N√£o h√° nenhuma op√ß√£o dispon√≠vel
                flash(f'‚ùå N√£o √© poss√≠vel autorizar esta miss√£o. D√©ficit: R$ {analise_saldo["deficit"]:,.2f}. '
                      f'N√£o h√° saldo suficiente em nenhuma unidade ou no CRPIV.', 'error')
                return redirect(url_for('missoes'))
            
            # H√° op√ß√µes - redirecionar para tela de resolu√ß√£o
            return render_template('resolver_sem_saldo.html',
                                 missao=missao,
                                 analise_saldo=analise_saldo,
                                 opcoes=opcoes)
                                 
    except Exception as e:
        print(f"‚ùå Erro ao autorizar miss√£o: {e}")
        import traceback
        traceback.print_exc()
        db.session.rollback()  # ‚úÖ ADICIONAR ROLLBACK
        flash(f'Erro ao autorizar miss√£o: {str(e)}', 'error')
        return redirect(url_for('missoes'))

def calcular_saldo_disponivel_crpiv(tipo_orcamento):
    """Calcula saldo dispon√≠vel do CRPIV (n√£o distribu√≠do) - VERS√ÉO CORRIGIDA"""
    try:
        print(f"üîç Calculando saldo CRPIV n√£o distribu√≠do para {tipo_orcamento}")
        
        # ‚úÖ TOTAL OR√áAMENT√ÅRIO (COTA + COMPLEMENTA√á√ïES)
        total_orcamentario = 0
        
        # Somar or√ßamento base de todos os bimestres
        orcamentos = Orcamento.query.all()
        for orc in orcamentos:
            if tipo_orcamento == 'DI√ÅRIAS':
                total_orcamentario += orc.diarias or 0
            elif tipo_orcamento == 'DERSO':
                total_orcamentario += orc.derso or 0
            elif tipo_orcamento == 'DI√ÅRIAS PAV':
                total_orcamentario += orc.diarias_pav or 0
            elif tipo_orcamento == 'DERSO PAV':
                total_orcamentario += orc.derso_pav or 0
        
        # Somar complementa√ß√µes
        complementacoes_total = db.session.query(
            db.func.sum(ComplementacaoOrcamento.valor)
        ).filter(
            ComplementacaoOrcamento.tipo_orcamento == tipo_orcamento
        ).scalar() or 0
        
        total_orcamentario += complementacoes_total
        
        # ‚úÖ TOTAL DISTRIBU√çDO (PARA SUBUNIDADES + USADO PELO CRPIV)
        total_distribuido = db.session.query(
            db.func.sum(Distribuicao.valor)
        ).filter(
            Distribuicao.tipo_orcamento == tipo_orcamento
            # ‚úÖ INCLUIR TODAS as distribui√ß√µes (subunidades E CRPIV)
        ).scalar() or 0
        
        # ‚úÖ SALDO DISPON√çVEL = OR√áAMENTO TOTAL - DISTRIBU√çDO
        saldo_disponivel = total_orcamentario - total_distribuido
        
        print(f"üìä CRPIV - {tipo_orcamento}:")
        print(f"   Total or√ßament√°rio: R$ {total_orcamentario:,.2f}")
        print(f"   Total distribu√≠do: R$ {total_distribuido:,.2f}")
        print(f"   Saldo n√£o distribu√≠do: R$ {saldo_disponivel:,.2f}")
        
        return max(0, saldo_disponivel)  # Nunca retornar negativo
        
    except Exception as e:
        print(f"‚ùå Erro ao calcular saldo CRPIV: {e}")
        return 0

def executar_distribuicao_crpiv_para_unidade(unidade_destino, tipo_orcamento, valor):
    """Executa nova distribui√ß√£o do CRPIV para uma unidade"""
    try:
        print(f"üì§ Distribuindo do CRPIV: {unidade_destino} - {tipo_orcamento} - R$ {valor:,.2f}")
        
        # ‚úÖ VALIDA√á√ïES
        if valor <= 0:
            return {'sucesso': False, 'erro': 'Valor deve ser maior que zero'}
        
        if unidade_destino == 'CRPIV':
            return {'sucesso': False, 'erro': 'N√£o √© poss√≠vel distribuir do CRPIV para o pr√≥prio CRPIV'}
        
        # ‚úÖ VERIFICAR SALDO DISPON√çVEL DO CRPIV
        saldo_crpiv = calcular_saldo_disponivel_crpiv(tipo_orcamento)
        
        if saldo_crpiv < valor:
            return {'sucesso': False, 'erro': f'CRPIV n√£o possui saldo suficiente. Dispon√≠vel: R$ {saldo_crpiv:,.2f}'}
        
        # ‚úÖ BUSCAR OR√áAMENTO MAIS RECENTE PARA VINCULAR
        orcamento_recente = Orcamento.query.order_by(Orcamento.data_criacao.desc()).first()
        
        if not orcamento_recente:
            return {'sucesso': False, 'erro': 'Nenhum or√ßamento encontrado para vincular a distribui√ß√£o'}
        
        # ‚úÖ CRIAR OU ATUALIZAR DISTRIBUI√á√ÉO
        distribuicao_existente = Distribuicao.query.filter_by(
            orcamento_id=orcamento_recente.id,
            unidade=unidade_destino,
            tipo_orcamento=tipo_orcamento
        ).first()
        
        if distribuicao_existente:
            valor_anterior = distribuicao_existente.valor
            distribuicao_existente.valor += valor
            distribuicao_existente.data_distribuicao = datetime.utcnow()
            
            print(f"üìà Atualizando distribui√ß√£o existente:")
            print(f"   De: R$ {valor_anterior:,.2f}")
            print(f"   Para: R$ {distribuicao_existente.valor:,.2f}")
        else:
            nova_distribuicao = Distribuicao(
                orcamento_id=orcamento_recente.id,
                unidade=unidade_destino,
                tipo_orcamento=tipo_orcamento,
                valor=valor,
                data_distribuicao=datetime.utcnow()
            )
            db.session.add(nova_distribuicao)
            
            print(f"‚úÖ Criando nova distribui√ß√£o: R$ {valor:,.2f}")
        
        # ‚úÖ REGISTRAR LOG
        registrar_movimentacao(
            tipo='nova_distribuicao_crpiv',
            descricao=f'Nova distribui√ß√£o CRPIV ‚Üí {unidade_destino} ({tipo_orcamento})',
            unidade_origem='CRPIV',
            unidade_destino=unidade_destino,
            tipo_orcamento=tipo_orcamento,
            valor=valor,
            orcamento_id=orcamento_recente.id
        )
        
        return {'sucesso': True, 'valor_transferido': valor}
        
    except Exception as e:
        print(f"‚ùå Erro na distribui√ß√£o CRPIV: {e}")
        import traceback
        traceback.print_exc()
        return {'sucesso': False, 'erro': str(e)}

def executar_recolhimento_unidade_para_crpiv(unidade_origem, tipo_orcamento, valor):
    """Executa recolhimento de saldo de uma unidade para o CRPIV"""
    try:
        print(f"üì• Recolhendo para CRPIV: {unidade_origem} - {tipo_orcamento} - R$ {valor:,.2f}")
        
        # ‚úÖ VALIDA√á√ïES
        if valor <= 0:
            return {'sucesso': False, 'erro': 'Valor deve ser maior que zero'}
        
        if unidade_origem == 'CRPIV':
            return {'sucesso': False, 'erro': 'N√£o √© poss√≠vel recolher do pr√≥prio CRPIV'}
        
        # ‚úÖ BUSCAR DISTRIBUI√á√ÉO DA UNIDADE ORIGEM
        distribuicao_origem = db.session.query(Distribuicao).filter_by(
            unidade=unidade_origem,
            tipo_orcamento=tipo_orcamento
        ).order_by(Distribuicao.data_distribuicao.desc()).first()
        
        if not distribuicao_origem:
            return {'sucesso': False, 'erro': f'Nenhuma distribui√ß√£o encontrada para {unidade_origem} - {tipo_orcamento}'}
        
        # ‚úÖ VERIFICAR SALDO DISPON√çVEL
        autorizado_origem = db.session.query(
            db.func.sum(Missao.valor)
        ).filter(
            Missao.fonte_dinheiro == unidade_origem,
            Missao.tipo == tipo_orcamento,
            Missao.status == 'autorizada'
        ).scalar() or 0
        
        saldo_real_origem = distribuicao_origem.valor - autorizado_origem
        
        if saldo_real_origem < valor:
            return {'sucesso': False, 'erro': f'Saldo insuficiente. Dispon√≠vel: R$ {saldo_real_origem:,.2f}'}
        
        # ‚úÖ REDUZIR DISTRIBUI√á√ÉO DA UNIDADE
        valor_original = distribuicao_origem.valor
        distribuicao_origem.valor -= valor
        
        print(f"üìâ Reduzindo distribui√ß√£o de {unidade_origem}:")
        print(f"   De: R$ {valor_original:,.2f}")
        print(f"   Para: R$ {distribuicao_origem.valor:,.2f}")
        
        # ‚úÖ CRIAR REGISTRO DE RECOLHIMENTO
        recolhimento = RecolhimentoSaldo(
            orcamento_id=distribuicao_origem.orcamento_id,
            unidade_origem=unidade_origem,
            unidade_destino='CRPIV',
            tipo_orcamento=tipo_orcamento,
            valor_recolhido=valor,
            motivo=f'Recolhimento de saldo n√£o utilizado',
            usuario_responsavel='Sistema'
        )
        db.session.add(recolhimento)
        
        # ‚úÖ REGISTRAR LOG
        registrar_movimentacao(
            tipo='recolhimento',
            descricao=f'Recolhimento {unidade_origem} ‚Üí CRPIV ({tipo_orcamento})',
            unidade_origem=unidade_origem,
            unidade_destino='CRPIV',
            tipo_orcamento=tipo_orcamento,
            valor=valor,
            orcamento_id=distribuicao_origem.orcamento_id
        )
        
        return {'sucesso': True, 'valor_transferido': valor}
        
    except Exception as e:
        print(f"‚ùå Erro no recolhimento: {e}")
        import traceback
        traceback.print_exc()
        return {'sucesso': False, 'erro': str(e)}

@app.route('/transferir_saldo', methods=['GET', 'POST'])
def transferir_saldo():
    """Interface para transferir saldo entre unidades - INCLUINDO CRPIV"""
    if request.method == 'POST':
        try:
            unidade_origem = request.form['unidade_origem']
            unidade_destino = request.form['unidade_destino']
            tipo_orcamento = request.form['tipo_orcamento']
            valor = float(request.form['valor'])
            
            print(f"üîÑ Solicita√ß√£o de transfer√™ncia recebida:")
            print(f"   Origem: {unidade_origem}")
            print(f"   Destino: {unidade_destino}")
            print(f"   Tipo: {tipo_orcamento}")
            print(f"   Valor: R$ {valor:,.2f}")
            
            # ‚úÖ EXECUTAR TRANSFER√äNCIA (agora suporta CRPIV)
            if unidade_origem == 'CRPIV':
                resultado = executar_distribuicao_crpiv_para_unidade(
                    unidade_destino, tipo_orcamento, valor
                )
            elif unidade_destino == 'CRPIV':
                resultado = executar_recolhimento_unidade_para_crpiv(
                    unidade_origem, tipo_orcamento, valor
                )
            else:
                resultado = executar_transferencia_entre_unidades(
                    unidade_origem, unidade_destino, tipo_orcamento, valor
                )
            
            if resultado['sucesso']:
                # Commit da transa√ß√£o
                db.session.commit()
                
                flash(f'‚úÖ Transfer√™ncia realizada com sucesso! '
                      f'R$ {valor:,.2f} transferidos de {unidade_origem} para {unidade_destino}', 'success')
                
                print(f"‚úÖ Transfer√™ncia commitada no banco!")
                
            else:
                # Rollback em caso de erro
                db.session.rollback()
                flash(f'‚ùå Erro na transfer√™ncia: {resultado["erro"]}', 'error')
                print(f"‚ùå Transfer√™ncia falhou: {resultado['erro']}")
            
            return redirect(url_for('transferir_saldo'))
            
        except ValueError as e:
            flash('‚ùå Valor inv√°lido inserido', 'error')
            return redirect(url_for('transferir_saldo'))
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro geral na transfer√™ncia: {e}")
            flash(f'‚ùå Erro ao processar transfer√™ncia: {str(e)}', 'error')
            return redirect(url_for('transferir_saldo'))
    
    # GET - Mostrar formul√°rio
    try:
        # ‚úÖ BUSCAR SALDOS DISPON√çVEIS POR UNIDADE (INCLUINDO CRPIV)
        saldos_disponiveis = {}
        
        # ‚úÖ INCLUIR TODAS AS UNIDADES (inclusive CRPIV)
        for unidade in UNIDADES:  # AGORA INCLUI CRPIV
            saldos_disponiveis[unidade] = {}
            
            for tipo in TIPOS_ORCAMENTO:
                if unidade == 'CRPIV':
                    # ‚úÖ C√ÅLCULO ESPECIAL PARA CRPIV
                    saldo_crpiv = calcular_saldo_disponivel_crpiv(tipo)
                    if saldo_crpiv > 0:
                        saldos_disponiveis[unidade][tipo] = {
                            'distribuido': 0,  # CRPIV n√£o recebe distribui√ß√µes
                            'autorizado': 0,   # CRPIV n√£o autoriza miss√µes
                            'disponivel': saldo_crpiv
                        }
                else:
                    # ‚úÖ C√ÅLCULO PARA SUBUNIDADES
                    # Total distribu√≠do
                    distribuido = db.session.query(
                        db.func.sum(Distribuicao.valor)
                    ).filter(
                        Distribuicao.unidade == unidade,
                        Distribuicao.tipo_orcamento == tipo
                    ).scalar() or 0
                    
                    # Total autorizado
                    autorizado = db.session.query(
                        db.func.sum(Missao.valor)
                    ).filter(
                        Missao.fonte_dinheiro == unidade,
                        Missao.tipo == tipo,
                        Missao.status == 'autorizada'
                    ).scalar() or 0
                    
                    saldo_disponivel = distribuido - autorizado
                    
                    if saldo_disponivel > 0:
                        saldos_disponiveis[unidade][tipo] = {
                            'distribuido': distribuido,
                            'autorizado': autorizado,
                            'disponivel': saldo_disponivel
                        }
        
        return render_template('transferir_saldo.html',
                             unidades=UNIDADES,  # ‚úÖ AGORA INCLUI CRPIV
                             tipos=TIPOS_ORCAMENTO,
                             saldos_disponiveis=saldos_disponiveis)
                             
    except Exception as e:
        print(f"‚ùå Erro ao carregar p√°gina de transfer√™ncia: {e}")
        flash('Erro ao carregar dados de saldos', 'error')
        return render_template('transferir_saldo.html',
                             unidades=UNIDADES,
                             tipos=TIPOS_ORCAMENTO,
                             saldos_disponiveis={})

@app.route('/resolver_sem_saldo/<int:missao_id>', methods=['POST'])
def resolver_sem_saldo(missao_id):
    """Resolver situa√ß√£o de saldo insuficiente"""
    try:
        missao = db.session.get(Missao, missao_id)
        if not missao:
            flash('Miss√£o n√£o encontrada', 'error')
            return redirect(url_for('missoes'))
        
        tipo_resolucao = request.form.get('tipo_resolucao')
        
        if tipo_resolucao == 'transferencia':
            # Transferir de outra unidade
            unidade_origem = request.form.get('unidade_origem')
            valor_transferir = float(request.form.get('valor_transferir', 0))
            
            # Executar transfer√™ncia
            resultado = executar_transferencia_entre_unidades(
                unidade_origem, missao.fonte_dinheiro, missao.tipo, valor_transferir
            )
            
            if resultado['sucesso']:
                # Autorizar miss√£o ap√≥s transfer√™ncia
                missao.status = 'autorizada'
                missao.data_autorizacao = datetime.utcnow()
                
                # Registrar resolu√ß√£o
                resolucao = ResolucaoSemSaldo(
                    missao_id=missao.id,
                    tipo_resolucao='transferencia',
                    valor_necessario=valor_transferir,
                    unidade_origem_transferencia=unidade_origem,
                    valor_transferido=valor_transferir,
                    observacoes=f'Transfer√™ncia de {unidade_origem} para {missao.fonte_dinheiro}'
                )
                db.session.add(resolucao)
                
                registrar_movimentacao(
                    tipo='autorizacao_com_transferencia',
                    descricao=f'Miss√£o autorizada ap√≥s transfer√™ncia de {unidade_origem}',
                    unidade_origem=missao.fonte_dinheiro,
                    tipo_orcamento=missao.tipo,
                    valor=missao.valor,
                    missao_id=missao.id
                )
                
                db.session.commit()
                flash(f'‚úÖ Transfer√™ncia realizada e miss√£o autorizada! '
                      f'R$ {valor_transferir:,.2f} transferidos de {unidade_origem}.', 'success')
                      
            else:
                flash(f'‚ùå Erro na transfer√™ncia: {resultado["erro"]}', 'error')
                
        elif tipo_resolucao == 'nova_distribuicao':
            # Solicitar nova distribui√ß√£o do CRPIV
            valor_solicitar = float(request.form.get('valor_solicitar', 0))
            
            resultado = executar_nova_distribuicao_crpiv(
                missao.fonte_dinheiro, missao.tipo, valor_solicitar
            )
            
            if resultado['sucesso']:
                # Autorizar miss√£o ap√≥s nova distribui√ß√£o
                missao.status = 'autorizada'
                missao.data_autorizacao = datetime.utcnow()
                
                # Registrar resolu√ß√£o
                resolucao = ResolucaoSemSaldo(
                    missao_id=missao.id,
                    tipo_resolucao='nova_distribuicao',
                    valor_necessario=valor_solicitar,
                    observacoes=f'Nova distribui√ß√£o do CRPIV para {missao.fonte_dinheiro}'
                )
                db.session.add(resolucao)
                
                registrar_movimentacao(
                    tipo='autorizacao_com_nova_distribuicao',
                    descricao=f'Miss√£o autorizada ap√≥s nova distribui√ß√£o do CRPIV',
                    unidade_origem='CRPIV',
                    unidade_destino=missao.fonte_dinheiro,
                    tipo_orcamento=missao.tipo,
                    valor=valor_solicitar,
                    missao_id=missao.id
                )
                
                db.session.commit()
                flash(f'‚úÖ Nova distribui√ß√£o realizada e miss√£o autorizada! '
                      f'R$ {valor_solicitar:,.2f} distribu√≠dos do CRPIV.', 'success')
                      
            else:
                flash(f'‚ùå Erro na nova distribui√ß√£o: {resultado["erro"]}', 'error')
                
        else:
            flash('Tipo de resolu√ß√£o inv√°lido', 'error')
        
        return redirect(url_for('missoes'))
        
    except Exception as e:
        print(f"‚ùå Erro ao resolver sem saldo: {e}")
        flash(f'Erro ao resolver situa√ß√£o: {str(e)}', 'error')
        return redirect(url_for('missoes'))

@app.route('/verificar_recolhimento/<int:orcamento_id>')
def verificar_recolhimento(orcamento_id):
    """Debug: Verificar o resultado do recolhimento"""
    try:
        print(f"üîç VERIFICANDO RESULTADO DO RECOLHIMENTO - Or√ßamento {orcamento_id}")
        
        # Distribui√ß√µes atuais
        distribuicoes = Distribuicao.query.filter_by(orcamento_id=orcamento_id).all()
        
        print("üìä DISTRIBUI√á√ïES ATUAIS:")
        for dist in distribuicoes:
            print(f"  {dist.unidade} - {dist.tipo_orcamento}: R$ {dist.valor:,.2f}")
        
        # Verificar se CRPIV tem valores
        crpiv_distribuicoes = [d for d in distribuicoes if d.unidade == 'CRPIV']
        
        print("üèõÔ∏è DISTRIBUI√á√ïES DO CRPIV:")
        total_crpiv = 0
        for dist in crpiv_distribuicoes:
            print(f"  {dist.tipo_orcamento}: R$ {dist.valor:,.2f}")
            total_crpiv += dist.valor
        
        print(f"üí∞ TOTAL NO CRPIV: R$ {total_crpiv:,.2f}")
        
        # Calcular novos saldos
        saldos_atuais = calcular_saldos_para_recolher_bimestre_corrigido(orcamento_id)
        
        print("üìä SALDOS AP√ìS RECOLHIMENTO:")
        for unidade, tipos in saldos_atuais.items():
            if tipos:
                print(f"  {unidade}:")
                for tipo, dados in tipos.items():
                    if dados['saldo_disponivel'] > 0:
                        print(f"    {tipo}: R$ {dados['saldo_disponivel']:,.2f}")
        
        return {
            "status": "OK",
            "distribuicoes_totais": len(distribuicoes),
            "distribuicoes_crpiv": len(crpiv_distribuicoes),
            "total_crpiv": total_crpiv,
            "saldos_restantes": saldos_atuais
        }
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {e}")
        return {"erro": str(e)}


def calcular_saldos_para_recolher_bimestre(orcamento_id):
    """Vers√£o corrigida com valida√ß√µes"""
    orcamento = db.session.get(Orcamento, orcamento_id) or abort(404)
    saldos_recolhimento = {}
    
    for unidade in ['7¬∫ BPM', '8¬∫ BPM', 'CIPO']:
        saldos_recolhimento[unidade] = {}
        
        for tipo in TIPOS_ORCAMENTO:
            # Total distribu√≠do
            distribuido = db.session.query(Distribuicao).filter_by(
                orcamento_id=orcamento_id,
                unidade=unidade,
                tipo_orcamento=tipo
            ).with_entities(db.func.sum(Distribuicao.valor)).scalar() or 0
            
            # ‚úÖ VALIDA√á√ÉO MELHORADA
            if distribuido <= 0:
                continue  # Pula se n√£o h√° distribui√ß√£o
            
            # Total autorizado
            autorizadas_unidade_tipo = db.session.query(Missao).filter(
                Missao.fonte_dinheiro == unidade,
                Missao.tipo == tipo,
                Missao.status == 'autorizada'
            ).with_entities(db.func.sum(Missao.valor)).scalar() or 0
            
            # Total distribu√≠do da unidade
            total_distribuido_unidade = db.session.query(Distribuicao).filter_by(
                orcamento_id=orcamento_id,
                unidade=unidade
            ).with_entities(db.func.sum(Distribuicao.valor)).scalar() or 0
            
            # ‚úÖ VALIDA√á√ÉO SEGURA
            if total_distribuido_unidade > 0:
                proporcao_tipo = distribuido / total_distribuido_unidade
                autorizado_proporcional = autorizadas_unidade_tipo * proporcao_tipo
            else:
                autorizado_proporcional = 0
            
            # Saldo dispon√≠vel
            saldo_disponivel = max(0, distribuido - autorizado_proporcional)
            
            if saldo_disponivel > 0:
                saldos_recolhimento[unidade][tipo] = {
                    'distribuido': distribuido,
                    'autorizado': autorizado_proporcional,
                    'saldo_disponivel': saldo_disponivel
                }
    
    return saldos_recolhimento


@app.route('/visualizar_recolhimento/<int:orcamento_id>')
def visualizar_recolhimento(orcamento_id):
    """Visualizar saldos dispon√≠veis para recolhimento - CORRIGIDO"""
    try:
        orcamento = db.session.get(Orcamento, orcamento_id)
        if not orcamento:
            flash('Or√ßamento n√£o encontrado', 'error')
            return redirect(url_for('saldos_bimestre'))
        
        print(f"üîç Visualizando recolhimento para or√ßamento {orcamento_id}")
        
        # Verificar se pode recolher
        pode_recolher = True
        erro = None
        
        # Verificar se bimestre j√° foi finalizado (se campo existir)
        if hasattr(orcamento, 'status') and getattr(orcamento, 'status') == 'finalizado':
            erro = "Este bimestre j√° foi finalizado"
            pode_recolher = False
        
        # ‚úÖ CALCULAR SALDOS DETALHADOS
        saldos_detalhados = calcular_saldos_para_recolher_bimestre_corrigido(orcamento_id)
        
        print("üí∞ Saldos detalhados calculados:")
        for unidade, tipos in saldos_detalhados.items():
            print(f"  {unidade}:")
            for tipo, dados in tipos.items():
                if dados['saldo_disponivel'] > 0:
                    print(f"    {tipo}: R$ {dados['saldo_disponivel']:,.2f}")
        
        # Verificar se tem saldo para recolher
        tem_saldo = any(
            any(dados['saldo_disponivel'] > 0 for dados in tipos.values()) 
            for tipos in saldos_detalhados.values() if tipos
        )
        
        if not tem_saldo:
            erro = "N√£o h√° saldos dispon√≠veis para recolher neste bimestre"
            pode_recolher = False
        
        if not pode_recolher:
            flash(erro, 'warning')
            return redirect(url_for('saldos_bimestre'))
        
        # Verificar recolhimentos existentes (se tabela existir)
        recolhimentos_existentes = []
        try:
            # Se voc√™ tiver a tabela RecolhimentoSaldo, descomente:
            # recolhimentos_existentes = RecolhimentoSaldo.query.filter_by(orcamento_id=orcamento_id).all()
            pass
        except:
            pass
        
        return render_template('recolher_saldos.html',
                             orcamento=orcamento,
                             saldos_detalhados=saldos_detalhados,  # ‚úÖ NOME CORRETO
                             recolhimentos_existentes=recolhimentos_existentes)
                             
    except Exception as e:
        print(f"‚ùå Erro em visualizar_recolhimento: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao calcular saldos para recolhimento', 'error')
        return redirect(url_for('saldos_bimestre'))


def calcular_saldos_para_recolher_bimestre_corrigido(orcamento_id):
    """Vers√£o corrigida do c√°lculo de saldos para recolhimento"""
    try:
        orcamento = db.session.get(Orcamento, orcamento_id)
        if not orcamento:
            return {}
        
        print(f"üîç Calculando saldos para recolhimento - Or√ßamento {orcamento_id}")
        
        saldos_detalhados = {}
        
        # Para cada unidade (exceto CRPIV)
        for unidade in ['7¬∫ BPM', '8¬∫ BPM', 'CIPO']:
            saldos_detalhados[unidade] = {}
            
            for tipo in TIPOS_ORCAMENTO:
                print(f"  Calculando {unidade} - {tipo}")
                
                # Total distribu√≠do para esta unidade/tipo neste bimestre
                distribuido = db.session.query(
                    db.func.sum(Distribuicao.valor)
                ).filter(
                    Distribuicao.orcamento_id == orcamento_id,
                    Distribuicao.unidade == unidade,
                    Distribuicao.tipo_orcamento == tipo
                ).scalar() or 0
                
                print(f"    Distribu√≠do: R$ {distribuido:,.2f}")
                
                # Total autorizado desta unidade/tipo
                autorizado = db.session.query(
                    db.func.sum(Missao.valor)
                ).filter(
                    Missao.fonte_dinheiro == unidade,
                    Missao.tipo == tipo,
                    Missao.status == 'autorizada'
                ).scalar() or 0
                
                print(f"    Autorizado: R$ {autorizado:,.2f}")
                
                # ‚úÖ C√ÅLCULO SIMPLES E DIRETO
                saldo_disponivel = max(0, distribuido - autorizado)
                
                print(f"    Saldo dispon√≠vel: R$ {saldo_disponivel:,.2f}")
                
                # S√≥ adicionar se houver saldo ou distribui√ß√£o
                if distribuido > 0 or autorizado > 0:
                    saldos_detalhados[unidade][tipo] = {
                        'distribuido': distribuido,
                        'autorizado': autorizado,
                        'saldo_disponivel': saldo_disponivel
                    }
        
        return saldos_detalhados
        
    except Exception as e:
        print(f"‚ùå Erro em calcular_saldos_para_recolher_bimestre_corrigido: {e}")
        import traceback
        traceback.print_exc()
        return {}

@app.route('/confirmar_recolhimento_simples/<int:orcamento_id>', methods=['POST'])

def confirmar_recolhimento_simples(orcamento_id):
    """Executar recolhimento com transfer√™ncia real de valores - VERS√ÉO COMPLETA"""    
    try:
        orcamento = db.session.get(Orcamento, orcamento_id)
        if not orcamento:
            flash('Or√ßamento n√£o encontrado', 'error')
            return redirect(url_for('saldos_bimestre'))
        
        print(f"üîç Confirmando recolhimento com transfer√™ncia - Or√ßamento {orcamento_id}")
        
        # Verificar se bimestre j√° foi finalizado
        if hasattr(orcamento, 'status') and getattr(orcamento, 'status') == 'finalizado':
            flash('Este bimestre j√° foi finalizado', 'error')
            return redirect(url_for('saldos_bimestre'))
        
        saldos_detalhados = calcular_saldos_para_recolher_bimestre_corrigido(orcamento_id)
        motivo = request.form.get('motivo', f'Recolhimento autom√°tico de saldo final do bimestre {orcamento.bimestre}/{orcamento.ano}')
        
        recolhimentos_realizados = 0
        valor_total_recolhido = 0
        recolhimentos_detalhados = []
        transferencias_realizadas = []
        
        print("üìã Dados do formul√°rio recebidos:")
        for key, value in request.form.items():
            print(f"  {key} = {value}")
        
        # ‚úÖ INICIAR TRANSA√á√ÉO PARA GARANTIR CONSIST√äNCIA
        from sqlalchemy.exc import SQLAlchemyError
        
        try:
            # Processar recolhimentos selecionados
            for unidade in ['7¬∫ BPM', '8¬∫ BPM', 'CIPO']:
                for tipo in TIPOS_ORCAMENTO:
                    campo_checkbox = f"recolher_{unidade}_{tipo}"
                    print(f"üîç Verificando campo: {campo_checkbox}")
                    
                    if request.form.get(campo_checkbox):
                        print(f"‚úÖ Campo marcado: {campo_checkbox}")
                        
                        if unidade in saldos_detalhados and tipo in saldos_detalhados[unidade]:
                            valor_recolher = saldos_detalhados[unidade][tipo]['saldo_disponivel']
                            
                            if valor_recolher > 0:
                                print(f"üí∞ Processando recolhimento: {unidade} - {tipo} - R$ {valor_recolher:,.2f}")
                                
                                # ‚úÖ PASSO 1: ENCONTRAR E REDUZIR A DISTRIBUI√á√ÉO
                                distribuicao_existente = Distribuicao.query.filter_by(
                                    orcamento_id=orcamento_id,
                                    unidade=unidade,
                                    tipo_orcamento=tipo
                                ).first()
                                
                                if distribuicao_existente:
                                    valor_original = distribuicao_existente.valor
                                    novo_valor = valor_original - valor_recolher
                                    
                                    print(f"üìâ Reduzindo distribui√ß√£o de {unidade}:")
                                    print(f"   Valor original: R$ {valor_original:,.2f}")
                                    print(f"   Valor recolhido: R$ {valor_recolher:,.2f}")
                                    print(f"   Novo valor: R$ {novo_valor:,.2f}")
                                    
                                    if novo_valor <= 0:
                                        # Se recolheu tudo, remove a distribui√ß√£o
                                        print(f"üóëÔ∏è Removendo distribui√ß√£o completamente (valor <= 0)")
                                        db.session.delete(distribuicao_existente)
                                    else:
                                        # Se ainda resta algo, atualiza o valor
                                        distribuicao_existente.valor = novo_valor
                                        print(f"üìù Atualizando distribui√ß√£o para R$ {novo_valor:,.2f}")
                                    
                                    # ‚úÖ PASSO 2: CRIAR NOVA DISTRIBUI√á√ÉO PARA O CRPIV
                                    # Isso efetivamente "devolve" o valor ao CRPIV
                                    distribuicao_crpiv = Distribuicao(
                                        orcamento_id=orcamento_id,
                                        unidade='CRPIV',
                                        tipo_orcamento=tipo,
                                        valor=valor_recolher
                                    )
                                    db.session.add(distribuicao_crpiv)
                                    
                                    print(f"‚úÖ Criando nova distribui√ß√£o para CRPIV:")
                                    print(f"   Unidade: CRPIV")
                                    print(f"   Tipo: {tipo}")
                                    print(f"   Valor: R$ {valor_recolher:,.2f}")
                                    
                                    # ‚úÖ PASSO 3: REGISTRAR O RECOLHIMENTO (se tabela existir)
                                    # TODO: Descomente se tiver tabela RecolhimentoSaldo
                                    """
                                    recolhimento = RecolhimentoSaldo(
                                        orcamento_id=orcamento_id,
                                        unidade_origem=unidade,
                                        unidade_destino='CRPIV',
                                        tipo_orcamento=tipo,
                                        valor_recolhido=valor_recolher,
                                        motivo=motivo,
                                        data_recolhimento=datetime.utcnow()
                                    )
                                    db.session.add(recolhimento)
                                    """
                                    
                                    # Registrar para relat√≥rio
                                    transferencias_realizadas.append({
                                        'de': unidade,
                                        'para': 'CRPIV',
                                        'tipo': tipo,
                                        'valor': valor_recolher,
                                        'valor_original': valor_original,
                                        'novo_valor': max(0, novo_valor)
                                    })
                                    
                                    recolhimentos_detalhados.append({
                                        'unidade': unidade,
                                        'tipo': tipo,
                                        'valor': valor_recolher,
                                        'motivo': motivo
                                    })
                                    
                                    recolhimentos_realizados += 1
                                    valor_total_recolhido += valor_recolher
                                
                                else:
                                    print(f"‚ö†Ô∏è Distribui√ß√£o n√£o encontrada para {unidade} - {tipo}")
            
            # ‚úÖ PASSO 4: COMMIT DAS ALTERA√á√ïES
            try:
                recolhimento_historico = RecolhimentoSaldo(
                    orcamento_id=orcamento_id,
                    unidade_origem=unidade,
                    unidade_destino='CRPIV',
                    tipo_orcamento=tipo,
                    valor_recolhido=valor_recolher,
                    motivo=motivo,
                    usuario_responsavel='Sistema',  # ou pegar do login
                    data_recolhimento=datetime.utcnow()
                )
                db.session.add(recolhimento_historico)
                print(f"üìù Hist√≥rico salvo: {unidade} ‚Üí CRPIV - R$ {valor_recolher:,.2f}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao salvar hist√≥rico: {e}")

            if transferencias_realizadas:
                db.session.commit()
                print(f"‚úÖ TRANSA√á√ÉO COMMITADA - {len(transferencias_realizadas)} transfer√™ncias realizadas")
                
                # Log detalhado das transfer√™ncias
                print("üìä RESUMO DAS TRANSFER√äNCIAS:")
                for transfer in transferencias_realizadas:
                    print(f"  üîÑ {transfer['de']} ‚Üí {transfer['para']}")
                    print(f"     Tipo: {transfer['tipo']}")
                    print(f"     Valor transferido: R$ {transfer['valor']:,.2f}")
                    print(f"     Saldo restante em {transfer['de']}: R$ {transfer['novo_valor']:,.2f}")
                    print(f"     Valor adicionado ao CRPIV: R$ {transfer['valor']:,.2f}")
                    print("-" * 40)
            
            # Finalizar bimestre se solicitado
            if request.form.get('finalizar_bimestre'):
                print("üèÅ Finalizando bimestre...")
                # TODO: Implementar l√≥gica de finaliza√ß√£o
                # orcamento.status = 'finalizado'
                # orcamento.data_finalizacao = datetime.utcnow()
                # db.session.commit()
            
            # ‚úÖ RESULTADO FINAL
            if recolhimentos_realizados > 0:
                print(f"üéâ RECOLHIMENTO CONCLU√çDO COM SUCESSO!")
                print(f"   Itens processados: {recolhimentos_realizados}")
                print(f"   Valor total recolhido: R$ {valor_total_recolhido:,.2f}")
                print(f"   Transfer√™ncias realizadas: {len(transferencias_realizadas)}")
                
                flash(f'‚úÖ Recolhimento realizado com sucesso! '
                      f'{recolhimentos_realizados} itens processados. '
                      f'Valor total transferido de volta ao CRPIV: R$ {valor_total_recolhido:,.2f}', 'success')
                
                # Mensagem detalhada sobre as transfer√™ncias
                for transfer in transferencias_realizadas:
                    flash(f'üîÑ {transfer["de"]} ‚Üí CRPIV: '
                          f'{transfer["tipo"]} - R$ {transfer["valor"]:,.2f}', 'info')
                
            else:
                flash('‚ö†Ô∏è Nenhum item foi selecionado para recolhimento.', 'warning')
            
            return redirect(url_for('saldos_bimestre'))
            
        except SQLAlchemyError as e:
            # Rollback em caso de erro na transa√ß√£o
            db.session.rollback()
            print(f"‚ùå ERRO NA TRANSA√á√ÉO - Rollback realizado")
            print(f"   Erro: {str(e)}")
            flash(f'‚ùå Erro ao processar recolhimento: {str(e)}', 'error')
            return redirect(url_for('visualizar_recolhimento', orcamento_id=orcamento_id))
        
    except Exception as e:
        print(f"‚ùå Erro geral em confirmar_recolhimento_simples: {e}")
        import traceback
        traceback.print_exc()
        db.session.rollback()
        flash(f'‚ùå Erro ao processar recolhimento: {str(e)}', 'error')
        return redirect(url_for('saldos_bimestre'))

@app.route('/orcamento', methods=['GET', 'POST'])
def orcamento():
    if request.method == 'POST':
        # Converter strings de data para objetos date
        data_inicio = datetime.strptime(request.form['data_inicio'], '%Y-%m-%d').date()
        data_fim = datetime.strptime(request.form['data_fim'], '%Y-%m-%d').date()
        
        # Validar datas
        if data_inicio >= data_fim:
            flash('Data de in√≠cio deve ser anterior √† data de fim', 'error')
            return redirect(request.url)
        
        novo_orcamento = Orcamento(
            bimestre=request.form['bimestre'],
            ano=int(request.form['ano']),
            data_inicio=data_inicio,
            data_fim=data_fim,
            diarias=float(request.form['diarias']),
            derso=float(request.form['derso']),
            diarias_pav=float(request.form['diarias_pav']),
            derso_pav=float(request.form['derso_pav'])
        )
        
        db.session.add(novo_orcamento)
        db.session.commit()
        registrar_movimentacao(
            tipo='orcamento_criado',
            descricao=f'Or√ßamento criado: {novo_orcamento.bimestre}/{novo_orcamento.ano}',
            valor=sum([novo_orcamento.diarias, novo_orcamento.derso, 
                      novo_orcamento.diarias_pav, novo_orcamento.derso_pav]),
            orcamento_id=novo_orcamento.id
        )
        
        flash('Or√ßamento cadastrado com sucesso!', 'success')
        return redirect(url_for('orcamento'))
    
    orcamentos = Orcamento.query.order_by(Orcamento.data_criacao.desc()).all()
    return render_template('orcamento.html', orcamentos=orcamentos, bimestres=BIMESTRES)


@app.route('/historico_recolhimentos')
def historico_recolhimentos():
    """Visualizar hist√≥rico de recolhimentos - ERRO CORRIGIDO"""
    try:
        print("üîç Carregando hist√≥rico de recolhimentos...")
        
        # ‚úÖ OP√á√ÉO 1: Se voc√™ tem tabela RecolhimentoSaldo
        recolhimentos = []
        try:
            # Descomente se tiver a tabela criada:
            """
            recolhimentos = db.session.query(RecolhimentoSaldo).join(Orcamento).order_by(
                RecolhimentoSaldo.data_recolhimento.desc()
            ).all()
            """
            pass
        except Exception as e:
            print(f"‚ö†Ô∏è Tabela RecolhimentoSaldo n√£o existe ainda: {e}")
        
        # ‚úÖ OP√á√ÉO 2: Simular dados baseados nas distribui√ß√µes do CRPIV - CORRIGIDA
        if not recolhimentos:
            print("üìä Criando hist√≥rico simulado baseado em distribui√ß√µes do CRPIV...")
            
            # ‚úÖ CORRE√á√ÉO: Usar JOIN ou buscar or√ßamento separadamente
            distribuicoes_crpiv = db.session.query(Distribuicao).filter(
                Distribuicao.unidade == 'CRPIV'
            ).order_by(Distribuicao.data_distribuicao.desc()).all()
            
            print(f"üìã Encontradas {len(distribuicoes_crpiv)} distribui√ß√µes do CRPIV")
            
            # Criar objetos simulados para o template
            recolhimentos_simulados = []
            for dist in distribuicoes_crpiv:
                # ‚úÖ BUSCAR OR√áAMENTO USANDO O ID
                orcamento = db.session.get(Orcamento, dist.orcamento_id)
                
                if orcamento:  # S√≥ processar se or√ßamento existir
                    # Simular um objeto recolhimento
                    class RecolhimentoSimulado:
                        def __init__(self, distribuicao, orcamento_obj):
                            self.data_recolhimento = distribuicao.data_distribuicao
                            self.orcamento = orcamento_obj  # ‚úÖ USAR OBJETO BUSCADO
                            self.unidade_origem = "Subunidade"  # Simulado (n√£o sabemos qual)
                            self.tipo_orcamento = distribuicao.tipo_orcamento  
                            self.valor_recolhido = distribuicao.valor
                            self.motivo = f"Recolhimento de saldo n√£o utilizado do {orcamento_obj.bimestre}/{orcamento_obj.ano}"
                            self.usuario_responsavel = "Sistema"
                    
                    recolhimento_obj = RecolhimentoSimulado(dist, orcamento)
                    recolhimentos_simulados.append(recolhimento_obj)
                    
                    print(f"‚úÖ Recolhimento simulado: {orcamento.bimestre}/{orcamento.ano} - {dist.tipo_orcamento} - R$ {dist.valor:,.2f}")
                else:
                    print(f"‚ö†Ô∏è Or√ßamento ID {dist.orcamento_id} n√£o encontrado para distribui√ß√£o")
            
            recolhimentos = recolhimentos_simulados
            print(f"‚úÖ {len(recolhimentos)} recolhimentos simulados criados")
        
        print(f"üìã Total de recolhimentos para exibir: {len(recolhimentos)}")
        
        return render_template('historico_recolhimentos.html', 
                             recolhimentos=recolhimentos)
                             
    except Exception as e:
        print(f"‚ùå Erro em historico_recolhimentos: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao carregar hist√≥rico de recolhimentos', 'error')
        return render_template('historico_recolhimentos.html', 
                             recolhimentos=[])

# Atualizar a fun√ß√£o de c√°lculo de saldos por bimestre
def calcular_saldo_por_bimestre():
    """Calcula saldos por bimestre - F√ìRMULA CORRIGIDA"""
    try:
        print("üîç Calculando saldos por bimestre...")
        
        orcamentos = Orcamento.query.order_by(Orcamento.data_criacao.desc()).all()
        saldos_lista = []
        
        for orcamento in orcamentos:
            print(f"üìä Processando {orcamento.bimestre}/{orcamento.ano}")
            
            # ‚úÖ 1. TOTAL DISPONIBILIZADO (Cota + Complementa√ß√µes)
            total_base = sum([
                orcamento.diarias or 0,
                orcamento.derso or 0, 
                orcamento.diarias_pav or 0,
                orcamento.derso_pav or 0
            ])
            
            # Somar complementa√ß√µes deste or√ßamento
            complementacoes = ComplementacaoOrcamento.query.filter_by(orcamento_id=orcamento.id).all()
            total_complementacoes = sum([comp.valor for comp in complementacoes])
            
            total_disponibilizado = total_base + total_complementacoes
            
            # ‚úÖ 2. TOTAL DISTRIBU√çDO (para subunidades)
            total_distribuido = db.session.query(
                db.func.sum(Distribuicao.valor)
            ).filter(
                Distribuicao.orcamento_id == orcamento.id,
                Distribuicao.unidade != 'CRPIV'  # Excluir distribui√ß√µes para CRPIV
            ).scalar() or 0
            
            # ‚úÖ 3. TOTAL AUTORIZADO (todas as miss√µes autorizadas deste bimestre)
            # Considerando que miss√µes s√£o vinculadas ao bimestre pelo per√≠odo ou data
            total_autorizado = db.session.query(
                db.func.sum(Missao.valor)
            ).filter(
                Missao.status == 'autorizada'
                # ‚úÖ AQUI voc√™ pode adicionar filtro por per√≠odo se tiver
                # Por exemplo: Missao.data_autorizacao entre data_inicio e data_fim do bimestre
            ).scalar() or 0
            
            # ‚úÖ 4. SALDO CORRETO = Disponibilizado - Autorizado
            # N√ÉO consideramos distribui√ß√µes, apenas o que foi realmente gasto
            saldo = total_disponibilizado - total_autorizado
            
            # Verificar se pode recolher (tem distribui√ß√µes n√£o utilizadas)
            pode_recolher = total_distribuido > total_autorizado
            
            # Total recolhido (se implementado)
            total_recolhido = 0
            if hasattr(orcamento, 'recolhimentos'):
                total_recolhido = sum([r.valor_recolhido for r in orcamento.recolhimentos])
            
            print(f"  üìà Disponibilizado: R$ {total_disponibilizado:,.2f}")
            print(f"  üì§ Distribu√≠do: R$ {total_distribuido:,.2f}")
            print(f"  ‚úÖ Autorizado: R$ {total_autorizado:,.2f}")
            print(f"  üí∞ Saldo: R$ {saldo:,.2f}")
            
            saldos_lista.append({
                'orcamento': orcamento,
                'complementacoes': complementacoes,
                'total_disponibilizado': total_disponibilizado,
                'total_distribuido': total_distribuido,
                'total_autorizado': total_autorizado,
                'saldo': saldo,  # ‚úÖ F√ìRMULA CORRIGIDA
                'pode_recolher': pode_recolher,
                'total_recolhido': total_recolhido
            })
        
        print(f"‚úÖ Calculados saldos para {len(saldos_lista)} bimestres")
        return saldos_lista
        
    except Exception as e:
        print(f"‚ùå Erro ao calcular saldos por bimestre: {e}")
        import traceback
        traceback.print_exc()
        return []


def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() == 'csv'

def validar_dados_missao(row, linha_num):
    """Valida uma linha de dados da importa√ß√£o - VERS√ÉO CORRIGIDA"""
    erros = []
    
    # Campos obrigat√≥rios
    campos_obrigatorios = ['fonte_dinheiro', 'opm_destino', 'processo_sei', 
                          'descricao', 'periodo', 'mes', 'tipo', 'valor']
    
    for campo in campos_obrigatorios:
        valor_campo = str(row.get(campo, '')).strip()
        if pd.isna(row.get(campo)) or valor_campo == '' or valor_campo == '*********':
            # Permitir processo_sei vazio ou com asteriscos
            if campo == 'processo_sei' and valor_campo == '*********':
                continue
            erros.append(f"Linha {linha_num}: Campo '{campo}' √© obrigat√≥rio")
    
    # Validar unidades
    if row.get('fonte_dinheiro') not in UNIDADES:
        erros.append(f"Linha {linha_num}: Fonte '{row.get('fonte_dinheiro')}' inv√°lida. Use: {', '.join(UNIDADES)}")
    
    if row.get('opm_destino') not in UNIDADES:
        erros.append(f"Linha {linha_num}: OPM destino '{row.get('opm_destino')}' inv√°lida. Use: {', '.join(UNIDADES)}")
    
    # Validar tipo de or√ßamento
    if row.get('tipo') not in TIPOS_ORCAMENTO:
        erros.append(f"Linha {linha_num}: Tipo '{row.get('tipo')}' inv√°lido. Use: {', '.join(TIPOS_ORCAMENTO)}")
    
    # Validar m√™s
    if row.get('mes') not in MESES:
        erros.append(f"Linha {linha_num}: M√™s '{row.get('mes')}' inv√°lido. Use: {', '.join(MESES)}")
    
    # Validar valor - MELHORADO para aceitar v√≠rgula
    try:
        valor_str = str(row.get('valor', '')).strip()
        # Aceitar v√≠rgula e ponto, remover espa√ßos
        valor_str = valor_str.replace(',', '.').replace(' ', '')
        valor = float(valor_str)
        if valor <= 0:
            erros.append(f"Linha {linha_num}: Valor deve ser maior que zero")
    except (ValueError, TypeError):
        erros.append(f"Linha {linha_num}: Valor '{row.get('valor')}' deve ser um n√∫mero v√°lido")
    
    # Validar status se fornecido
    if row.get('status') and row.get('status') not in ['previsao', 'autorizada']:
        erros.append(f"Linha {linha_num}: Status deve ser 'previsao' ou 'autorizada'")
    
    return erros

@app.route('/importar_missoes', methods=['GET', 'POST'])
def importar_missoes():
    if request.method == 'POST':
        if 'arquivo' not in request.files:
            flash('Nenhum arquivo selecionado', 'error')
            return redirect(request.url)
        
        arquivo = request.files['arquivo']
        
        if arquivo.filename == '':
            flash('Nenhum arquivo selecionado', 'error')
            return redirect(request.url)
        
        if arquivo and allowed_file(arquivo.filename):
            try:
                # Ler arquivo CSV
                df = pd.read_csv(arquivo, encoding='utf-8', sep='\t')  # Usar TAB como separador
                
                # Se n√£o funcionar com TAB, tentar outros
                if len(df.columns) == 1:
                    arquivo.seek(0)
                    df = pd.read_csv(arquivo, encoding='utf-8', sep=';')
                
                if len(df.columns) == 1:
                    arquivo.seek(0)
                    df = pd.read_csv(arquivo, encoding='utf-8', sep=',')
                
                # Limpar nomes das colunas
                df.columns = df.columns.str.strip()
                
                # Log para debug
                print("Colunas encontradas:", list(df.columns))
                print("Primeiras linhas:", df.head())
                
                # Verificar colunas obrigat√≥rias
                colunas_esperadas = ['fonte_dinheiro', 'opm_destino', 'processo_sei', 
                                   'descricao', 'periodo', 'mes', 'tipo', 'valor']
                
                colunas_faltantes = [col for col in colunas_esperadas if col not in df.columns]
                if colunas_faltantes:
                    flash(f'Colunas obrigat√≥rias faltando: {", ".join(colunas_faltantes)}', 'error')
                    flash(f'Colunas encontradas: {", ".join(df.columns)}', 'info')
                    return redirect(request.url)
                
                # Processar dados
                erros_validacao = []
                missoes_validas = []
                
                for index, row in df.iterrows():
                    linha_num = index + 2
                    
                    # Pular linhas vazias
                    if pd.isna(row['fonte_dinheiro']) or str(row['fonte_dinheiro']).strip() == '':
                        continue
                    
                    erros_linha = validar_dados_missao(row, linha_num)
                    erros_validacao.extend(erros_linha)
                    
                    if not erros_linha:
                        # Limpar e converter dados
                        valor_str = str(row['valor']).strip().replace(',', '.').replace(' ', '')
                        valor = float(valor_str)
                        status = str(row.get('status', 'previsao')).strip().lower()
                        
                        # Tratar processo SEI especial
                        processo_sei = str(row['processo_sei']).strip()
                        if processo_sei == '*********':
                            processo_sei = f"TEMP-{datetime.now().strftime('%Y%m%d')}-{index}"
                        
                        # Tratar n√∫mero de autoriza√ß√£o
                        num_auth = str(row.get('numero_autorizacao', '')).strip()
                        if num_auth == '0':
                            num_auth = ''
                        
                        missao_data = {
                            'fonte_dinheiro': str(row['fonte_dinheiro']).strip(),
                            'opm_destino': str(row['opm_destino']).strip(),
                            'processo_sei': processo_sei,
                            'descricao': str(row['descricao']).strip(),
                            'periodo': str(row['periodo']).strip(),
                            'mes': str(row['mes']).strip(),
                            'tipo': str(row['tipo']).strip(),
                            'valor': valor,
                            'numero_autorizacao': num_auth,
                            'status': status if status in ['previsao', 'autorizada'] else 'previsao'
                        }
                        missoes_validas.append(missao_data)
                
                # Mostrar erros se houver
                if erros_validacao:
                    flash(f'Encontrados {len(erros_validacao)} erros:', 'error')
                    for erro in erros_validacao[:10]:
                        flash(erro, 'error')
                    if len(erros_validacao) > 10:
                        flash(f'... e mais {len(erros_validacao) - 10} erros', 'error')
                    
                    # Mostrar quantas miss√µes seriam importadas mesmo com erros
                    flash(f'Miss√µes v√°lidas encontradas: {len(missoes_validas)}', 'info')
                    return redirect(request.url)
                
                # Importar miss√µes v√°lidas
                missoes_importadas = 0
                for missao_data in missoes_validas:
                    nova_missao = Missao(**missao_data)
                    
                    if nova_missao.status == 'autorizada':
                        nova_missao.data_autorizacao = datetime.utcnow()
                    
                    db.session.add(nova_missao)
                    missoes_importadas += 1
                
                db.session.commit()
                flash(f'Sucesso! {missoes_importadas} miss√µes importadas.', 'success')
                return redirect(url_for('missoes'))
                
            except Exception as e:
                flash(f'Erro ao processar arquivo: {str(e)}', 'error')
                print(f"Erro detalhado: {e}")
                import traceback
                traceback.print_exc()
        else:
            flash('Tipo de arquivo n√£o permitido. Use apenas .csv', 'error')
    
    return render_template('importar_missoes.html', 
                         unidades=UNIDADES,
                         tipos=TIPOS_ORCAMENTO,
                         meses=MESES)


@app.route('/download_modelo_csv')
def download_modelo_csv():
    """Gera um arquivo CSV modelo para importa√ß√£o"""
    dados_exemplo = [
        {
            'fonte_dinheiro': 'CRPIV',
            'opm_destino': '7¬∫ BPM',
            'processo_sei': '23.000.001/2024-01',
            'descricao': 'Opera√ß√£o exemplo - Patrulhamento rural',
            'periodo': '01/01/2024 a 05/01/2024',
            'mes': 'Janeiro',
            'tipo': 'DI√ÅRIAS',
            'valor': '1500.00',
            'numero_autorizacao': 'AUT-001/2024',
            'status': 'previsao'
        },
        {
            'fonte_dinheiro': '7¬∫ BPM',
            'opm_destino': '8¬∫ BPM',
            'processo_sei': '23.000.002/2024-01',
            'descricao': 'Apoio operacional - Eventos especiais',
            'periodo': '10/01/2024 a 15/01/2024',
            'mes': 'Janeiro',
            'tipo': 'DERSO',
            'valor': '2000.50',
            'numero_autorizacao': '',
            'status': 'autorizada'
        }
    ]
    
    # Criar DataFrame
    df = pd.DataFrame(dados_exemplo)
    
    # Criar arquivo CSV em mem√≥ria
    output = io.StringIO()
    df.to_csv(output, index=False, sep=';', encoding='utf-8')
    output.seek(0)
    
    # Retornar arquivo para download
    return Response(
        output.getvalue(),
        mimetype='text/csv',
        headers={'Content-Disposition': 'attachment; filename=modelo_importacao_missoes.csv'}
    )

# Adicionar import do Response no topo do arquivo
from flask import Response


db.init_app(app)

UNIDADES = ['CRPIV', '7¬∫ BPM', '8¬∫ BPM', 'CIPO']
TIPOS_ORCAMENTO = ['DI√ÅRIAS', 'DERSO', 'DI√ÅRIAS PAV', 'DERSO PAV']
BIMESTRES = ['1¬∫ Bimestre', '2¬∫ Bimestre', '3¬∫ Bimestre', '4¬∫ Bimestre', '5¬∫ Bimestre', '6¬∫ Bimestre']
MESES = ['Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho', 
         'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro']

@app.template_filter('currency')
def currency_filter(value):
    if value is None:
        return "0,00"
    try:
        return f"{float(value):,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
    except (ValueError, TypeError):
        return "0,00"


def create_tables():
    with app.app_context():
        db.create_all()


def calcular_saldos_para_distribuir():
    """Calcula quanto ainda pode ser distribu√≠do pelo CRPIV - VERS√ÉO CORRIGIDA"""
    try:
        # Or√ßamento total de todos os bimestres (Cota + Complementa√ß√µes)
        totais_geral = calcular_orcamento_total_todos_bimestres()
        
        # ‚úÖ CORRE√á√ÉO: Total j√° distribu√≠do APENAS PARA SUBUNIDADES
        distribuido_por_tipo = {
            'DI√ÅRIAS': 0,
            'DERSO': 0,
            'DI√ÅRIAS PAV': 0,
            'DERSO PAV': 0
        }
        
        # Somar apenas distribui√ß√µes para subunidades (excluindo CRPIV)
        distribuicoes_agregadas = db.session.query(
            Distribuicao.tipo_orcamento,
            db.func.sum(Distribuicao.valor).label('total')
        ).filter(
            Distribuicao.unidade != 'CRPIV'  # ‚úÖ EXCLUIR CRPIV
        ).group_by(Distribuicao.tipo_orcamento).all()
        
        for tipo, total in distribuicoes_agregadas:
            if tipo in distribuido_por_tipo:
                distribuido_por_tipo[tipo] = total or 0
        
        print("üí∞ C√°lculo de saldos para distribuir (CORRIGIDO):")
        print("üìä Total geral dispon√≠vel (Cota + Complementa√ß√µes):")
        for tipo, valor in totais_geral.items():
            print(f"  {tipo}: R$ {valor:,.2f}")
        
        print("üì§ Total distribu√≠do para subunidades:")
        for tipo, valor in distribuido_por_tipo.items():
            print(f"  {tipo}: R$ {valor:,.2f}")
        
        # Calcular saldos dispon√≠veis para distribuir
        saldos_para_distribuir = {
            'diarias': max(0, totais_geral['diarias'] - distribuido_por_tipo['DI√ÅRIAS']),
            'derso': max(0, totais_geral['derso'] - distribuido_por_tipo['DERSO']),
            'diarias_pav': max(0, totais_geral['diarias_pav'] - distribuido_por_tipo['DI√ÅRIAS PAV']),
            'derso_pav': max(0, totais_geral['derso_pav'] - distribuido_por_tipo['DERSO PAV'])
        }
        
        print("‚úÖ Saldos dispon√≠veis para nova distribui√ß√£o:")
        for tipo, valor in saldos_para_distribuir.items():
            print(f"  {tipo}: R$ {valor:,.2f}")
        
        return saldos_para_distribuir
        
    except Exception as e:
        print(f"‚ùå Erro em calcular_saldos_para_distribuir: {e}")
        return {'diarias': 0, 'derso': 0, 'diarias_pav': 0, 'derso_pav': 0}


def calcular_orcamento_total_todos_bimestres():
    """Calcula o or√ßamento total de TODOS os bimestres incluindo complementa√ß√µes - CORRIGIDO"""
    try:
        # ‚úÖ CORRE√á√ÉO: Usar agrega√ß√£o no banco
        orcamentos_totais = db.session.query(
            db.func.sum(Orcamento.diarias).label('diarias'),
            db.func.sum(Orcamento.derso).label('derso'),
            db.func.sum(Orcamento.diarias_pav).label('diarias_pav'),
            db.func.sum(Orcamento.derso_pav).label('derso_pav')
        ).first()
        
        totais = {
            'diarias': orcamentos_totais.diarias or 0,
            'derso': orcamentos_totais.derso or 0,
            'diarias_pav': orcamentos_totais.diarias_pav or 0,
            'derso_pav': orcamentos_totais.derso_pav or 0
        }
        
        # ‚úÖ CORRE√á√ÉO: Somar complementa√ß√µes usando agrega√ß√£o
        complementacoes_agregadas = db.session.query(
            ComplementacaoOrcamento.tipo_orcamento,
            db.func.sum(ComplementacaoOrcamento.valor).label('total')
        ).group_by(ComplementacaoOrcamento.tipo_orcamento).all()
        
        for tipo, total in complementacoes_agregadas:
            if tipo == 'DI√ÅRIAS':
                totais['diarias'] += total or 0
            elif tipo == 'DERSO':
                totais['derso'] += total or 0
            elif tipo == 'DI√ÅRIAS PAV':
                totais['diarias_pav'] += total or 0
            elif tipo == 'DERSO PAV':
                totais['derso_pav'] += total or 0
        
        return totais
        
    except Exception as e:
        print(f"‚ùå Erro em calcular_orcamento_total_todos_bimestres: {e}")
        return {'diarias': 0, 'derso': 0, 'diarias_pav': 0, 'derso_pav': 0}


def calcular_saldo_por_bimestre():
    """Calcula saldos por bimestre - FLUXO CORRETO DO CRPIV"""
    try:
        print("üîç Calculando saldos por bimestre...")
        
        orcamentos = Orcamento.query.order_by(Orcamento.data_criacao.desc()).all()
        saldos_lista = []
        
        for orcamento in orcamentos:
            print(f"üìä Processando {orcamento.bimestre}/{orcamento.ano}")
            
            # ‚úÖ 1. TOTAL DISPONIBILIZADO (Cota + Complementa√ß√µes para CRPIV)
            total_base = sum([
                orcamento.diarias or 0,
                orcamento.derso or 0, 
                orcamento.diarias_pav or 0,
                orcamento.derso_pav or 0
            ])
            
            # Complementa√ß√µes para este or√ßamento
            complementacoes = ComplementacaoOrcamento.query.filter_by(orcamento_id=orcamento.id).all()
            total_complementacoes = sum([comp.valor for comp in complementacoes])
            
            total_disponibilizado = total_base + total_complementacoes
            
            # ‚úÖ 2. TOTAL DISTRIBU√çDO (apenas para subunidades, N√ÉO conta CRPIV)
            total_distribuido = db.session.query(
                db.func.sum(Distribuicao.valor)
            ).filter(
                Distribuicao.orcamento_id == orcamento.id,
                Distribuicao.unidade != 'CRPIV'  # ‚úÖ EXCLUIR CRPIV
            ).scalar() or 0
            
            # ‚úÖ 3. TOTAL AUTORIZADO (todas as miss√µes autorizadas, independente da fonte)
            # Isso inclui miss√µes pagas pelo CRPIV e pelas subunidades
            total_autorizado = db.session.query(
                db.func.sum(Missao.valor)
            ).filter(
                Missao.status == 'autorizada'
                # ‚úÖ Aqui voc√™ pode filtrar por per√≠odo do bimestre se necess√°rio
            ).scalar() or 0
            
            # ‚úÖ 4. SALDO CORRETO = Total Disponibilizado - Total Autorizado
            # Representa quanto ainda resta do or√ßamento original
            saldo = total_disponibilizado - total_autorizado
            
            # ‚úÖ 5. SALDO CRPIV (n√£o distribu√≠do) = Disponibilizado - Distribu√≠do
            saldo_crpiv_disponivel = total_disponibilizado - total_distribuido
            
            # ‚úÖ 6. SALDO SUBUNIDADES = Distribu√≠do - Autorizado por subunidades
            autorizado_subunidades = db.session.query(
                db.func.sum(Missao.valor)
            ).filter(
                Missao.status == 'autorizada',
                Missao.fonte_dinheiro != 'CRPIV'  # Apenas subunidades
            ).scalar() or 0
            
            autorizado_crpiv = db.session.query(
                db.func.sum(Missao.valor)
            ).filter(
                Missao.status == 'autorizada',
                Missao.fonte_dinheiro == 'CRPIV'  # Apenas CRPIV
            ).scalar() or 0
            
            saldo_subunidades = total_distribuido - autorizado_subunidades
            
            print(f"  üí∞ Total Disponibilizado (Cota + Complementa√ß√µes): R$ {total_disponibilizado:,.2f}")
            print(f"  üì§ Distribu√≠do para Subunidades: R$ {total_distribuido:,.2f}")
            print(f"  üèõÔ∏è  Saldo CRPIV (n√£o distribu√≠do): R$ {saldo_crpiv_disponivel:,.2f}")
            print(f"  ‚úÖ Total Autorizado (TODAS as miss√µes): R$ {total_autorizado:,.2f}")
            print(f"     - Autorizado por CRPIV: R$ {autorizado_crpiv:,.2f}")
            print(f"     - Autorizado por Subunidades: R$ {autorizado_subunidades:,.2f}")
            print(f"  üí∏ Saldo Subunidades: R$ {saldo_subunidades:,.2f}")
            print(f"  üìä SALDO FINAL: R$ {saldo:,.2f}")
            
            saldos_lista.append({
                'orcamento': orcamento,
                'complementacoes': complementacoes,
                'total_disponibilizado': total_disponibilizado,
                'total_distribuido': total_distribuido,
                'total_autorizado': total_autorizado,
                'autorizado_crpiv': autorizado_crpiv,
                'autorizado_subunidades': autorizado_subunidades,
                'saldo_crpiv_disponivel': saldo_crpiv_disponivel,
                'saldo_subunidades': saldo_subunidades,
                'saldo': saldo,  # ‚úÖ SALDO CORRETO
                'pode_recolher': saldo_subunidades > 0,
                'total_recolhido': 0
            })
        
        return saldos_lista
        
    except Exception as e:
        print(f"‚ùå Erro ao calcular saldos por bimestre: {e}")
        import traceback
        traceback.print_exc()
        return []

def calcular_orcamento_total_com_complementacao(orcamento):
    """Calcula o or√ßamento DISPON√çVEL de um bimestre (considerando distribui√ß√µes j√° feitas)"""
    if not orcamento:
        return {'diarias': 0, 'derso': 0, 'diarias_pav': 0, 'derso_pav': 0}
    
    try:
        print(f"üîç Calculando saldo dispon√≠vel para or√ßamento {orcamento.bimestre}/{orcamento.ano}")
        
        # ‚úÖ PASSO 1: Total base + complementa√ß√µes
        totais_base = {
            'diarias': float(orcamento.diarias or 0),
            'derso': float(orcamento.derso or 0),
            'diarias_pav': float(orcamento.diarias_pav or 0),
            'derso_pav': float(orcamento.derso_pav or 0)
        }
        
        print(f"üìä Or√ßamento base:")
        for tipo, valor in totais_base.items():
            print(f"  {tipo}: R$ {valor:,.2f}")
        
        # Somar complementa√ß√µes
        complementacoes_agregadas = db.session.query(
            ComplementacaoOrcamento.tipo_orcamento,
            db.func.sum(ComplementacaoOrcamento.valor).label('total')
        ).filter(ComplementacaoOrcamento.orcamento_id == orcamento.id).group_by(
            ComplementacaoOrcamento.tipo_orcamento
        ).all()
        
        for tipo, total in complementacoes_agregadas:
            if tipo == 'DI√ÅRIAS':
                totais_base['diarias'] += total or 0
            elif tipo == 'DERSO':
                totais_base['derso'] += total or 0
            elif tipo == 'DI√ÅRIAS PAV':
                totais_base['diarias_pav'] += total or 0
            elif tipo == 'DERSO PAV':
                totais_base['derso_pav'] += total or 0
        
        print(f"üìà Ap√≥s complementa√ß√µes:")
        for tipo, valor in totais_base.items():
            print(f"  {tipo}: R$ {valor:,.2f}")
        
        # ‚úÖ PASSO 2: Subtrair distribui√ß√µes j√° feitas PARA SUBUNIDADES
        distribuicoes_agregadas = db.session.query(
            Distribuicao.tipo_orcamento,
            db.func.sum(Distribuicao.valor).label('total')
        ).filter(
            Distribuicao.orcamento_id == orcamento.id,
            Distribuicao.unidade != 'CRPIV'  # ‚úÖ EXCLUIR CRPIV (recolhimentos)
        ).group_by(Distribuicao.tipo_orcamento).all()
        
        # Calcular saldos dispon√≠veis
        saldos_disponiveis = totais_base.copy()
        
        for tipo, total_distribuido in distribuicoes_agregadas:
            if tipo == 'DI√ÅRIAS':
                saldos_disponiveis['diarias'] -= total_distribuido or 0
            elif tipo == 'DERSO':
                saldos_disponiveis['derso'] -= total_distribuido or 0
            elif tipo == 'DI√ÅRIAS PAV':
                saldos_disponiveis['diarias_pav'] -= total_distribuido or 0
            elif tipo == 'DERSO PAV':
                saldos_disponiveis['derso_pav'] -= total_distribuido or 0
        
        print(f"üì§ Ap√≥s subtrair distribui√ß√µes:")
        for tipo, valor in saldos_disponiveis.items():
            print(f"  {tipo}: R$ {valor:,.2f}")
        
        # ‚úÖ Garantir que n√£o h√° valores negativos
        for tipo in saldos_disponiveis:
            saldos_disponiveis[tipo] = max(0, saldos_disponiveis[tipo])
        
        print(f"‚úÖ Saldos dispon√≠veis finais:")
        for tipo, valor in saldos_disponiveis.items():
            print(f"  {tipo}: R$ {valor:,.2f}")
        
        return saldos_disponiveis
        
    except Exception as e:
        print(f"‚ùå Erro em calcular_orcamento_total_com_complementacao: {e}")
        import traceback
        traceback.print_exc()
        return {'diarias': 0, 'derso': 0, 'diarias_pav': 0, 'derso_pav': 0}



@app.route('/')
def index():
    try:
        # Calcular or√ßamento total de todos os bimestres
        totais_geral = calcular_orcamento_total_todos_bimestres()
        total_disponibilizado = sum(totais_geral.values())
        
        # Calcular saldos dispon√≠veis para distribuir
        saldos_para_distribuir = calcular_saldos_para_distribuir()
        total_para_distribuir = sum(saldos_para_distribuir.values())
        
        # Total de miss√µes
        total_previsoes = db.session.query(
            db.func.sum(Missao.valor)
        ).filter(Missao.status == 'previsao').scalar() or 0
        
        total_autorizadas = db.session.query(
            db.func.sum(Missao.valor)
        ).filter(Missao.status == 'autorizada').scalar() or 0
        
        disponivel = max(0, total_disponibilizado - total_autorizadas)
        
        # ‚úÖ NOVO: Calcular saldos detalhados por unidade e tipo
        saldos_unidades_detalhados = calcular_saldos_unidades_por_tipo()
        
        # Calcular saldos totais por unidade (para compatibilidade)
        saldos_unidades = {}
        distribuicoes_unidades = {}
        
        for unidade in UNIDADES[1:]:  # Excluir CRPIV
            total_unidade = 0
            distribuido_unidade = 0
            
            if unidade in saldos_unidades_detalhados:
                for tipo_data in saldos_unidades_detalhados[unidade].values():
                    total_unidade += tipo_data['saldo']
                    distribuido_unidade += tipo_data['distribuido']
            
            saldos_unidades[unidade] = total_unidade
            distribuicoes_unidades[unidade] = distribuido_unidade
        
        # Calcular saldos por bimestre
        saldos_bimestre = calcular_saldo_por_bimestre()
        
        # Logs para debug
        print("üìä DASHBOARD - Resumo dos c√°lculos:")
        print(f"üí∞ Total disponibilizado (Cota + Complementa√ß√µes): R$ {total_disponibilizado:,.2f}")
        print(f"üì§ Total distribu√≠do para subunidades: R$ {sum(distribuicoes_unidades.values()):,.2f}")
        print(f"‚úÖ Total autorizado: R$ {total_autorizadas:,.2f}")
        print(f"üìä Dispon√≠vel restante: R$ {disponivel:,.2f}")
        print(f"üîÑ Total para distribuir (CRPIV): R$ {total_para_distribuir:,.2f}")
        
        dashboard_data = {
            'total_disponibilizado': total_disponibilizado,
            'total_previsoes': total_previsoes,
            'total_autorizadas': total_autorizadas,
            'disponivel': disponivel,
            'distribuicoes_unidades': distribuicoes_unidades
        }
        # Saldo n√£o distribu√≠do do CRPIV - pode ser usado pelo CRPIV ou redistribu√≠do
        saldo_crpiv = sum([saldos_para_distribuir.get(k, 0) for k in ['diarias', 'derso', 'diarias_pav', 'derso_pav']])
        dashboard_data['saldo_crpiv'] = saldo_crpiv
        dashboard_data['saldo_crpiv_detalhado'] = {
            'diarias': saldos_para_distribuir.get('diarias', 0),
            'derso': saldos_para_distribuir.get('derso', 0),
            'diarias_pav': saldos_para_distribuir.get('diarias_pav', 0),
            'derso_pav': saldos_para_distribuir.get('derso_pav', 0),
        }


        dashboard_data['saldo_crpiv'] = saldo_crpiv
        dashboard_data['saldo_crpiv_detalhado'] = {
            'diarias': saldos_para_distribuir.get('diarias', 0),
            'derso': saldos_para_distribuir.get('derso', 0),
            'diarias_pav': saldos_para_distribuir.get('diarias_pav', 0),
            'derso_pav': saldos_para_distribuir.get('derso_pav', 0)
        }
        
        return render_template('index.html', 
                             totais_geral=totais_geral,
                             saldos_para_distribuir=saldos_para_distribuir,
                             total_para_distribuir=total_para_distribuir,
                             dashboard_data=dashboard_data,
                             saldos_unidades=saldos_unidades,
                             saldos_unidades_detalhados=saldos_unidades_detalhados,  # ‚úÖ NOVO
                             saldos_bimestre=saldos_bimestre)
                             
    except Exception as e:
        print(f"‚ùå Erro na rota index: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao carregar dados do dashboard', 'error')
        return render_template('index.html', 
                             totais_geral={'diarias': 0, 'derso': 0, 'diarias_pav': 0, 'derso_pav': 0},
                             saldos_para_distribuir={'diarias': 0, 'derso': 0, 'diarias_pav': 0, 'derso_pav': 0},
                             total_para_distribuir=0,
                             dashboard_data={},
                             saldos_unidades={},
                             saldos_unidades_detalhados={},  # ‚úÖ NOVO
                             saldos_bimestre=[])


def calcular_saldos_unidades_por_tipo():
    """Calcula saldos detalhados por unidade e tipo or√ßament√°rio"""
    try:
        print("üîç Calculando saldos detalhados por unidade e tipo...")
        
        saldos_detalhados = {}
        
        # Para cada unidade (exceto CRPIV)
        for unidade in UNIDADES[1:]:
            saldos_detalhados[unidade] = {}
            
            # Para cada tipo or√ßament√°rio
            for tipo in TIPOS_ORCAMENTO:
                print(f"  Calculando {unidade} - {tipo}")
                
                # Total distribu√≠do para esta unidade/tipo
                distribuido = db.session.query(
                    db.func.sum(Distribuicao.valor)
                ).filter(
                    Distribuicao.unidade == unidade,
                    Distribuicao.tipo_orcamento == tipo
                ).scalar() or 0
                
                # Total autorizado para esta unidade/tipo
                autorizado = db.session.query(
                    db.func.sum(Missao.valor)
                ).filter(
                    Missao.fonte_dinheiro == unidade,
                    Missao.tipo == tipo,
                    Missao.status == 'autorizada'
                ).scalar() or 0
                
                # Saldo = Distribu√≠do - Autorizado
                saldo = distribuido - autorizado
                
                print(f"    Distribu√≠do: R$ {distribuido:,.2f}")
                print(f"    Autorizado: R$ {autorizado:,.2f}")
                print(f"    Saldo: R$ {saldo:,.2f}")
                
                # Armazenar dados detalhados
                saldos_detalhados[unidade][tipo] = {
                    'distribuido': distribuido,
                    'autorizado': autorizado,
                    'saldo': saldo
                }
        
        print(f"‚úÖ Saldos detalhados calculados para {len(saldos_detalhados)} unidades")
        return saldos_detalhados
        
    except Exception as e:
        print(f"‚ùå Erro em calcular_saldos_unidades_por_tipo: {e}")
        import traceback
        traceback.print_exc()
        return {}

@app.route('/exportar_missoes_pdf')
def exportar_missoes_pdf():
    """Exportar miss√µes para PDF separadas por unidades"""
    try:
        # Buscar filtros
        omp_filtro = request.args.get('opm_filtro', '')
        fonte_filtro = request.args.get('fonte_filtro', '')
        
        print(f"üîç Exportando PDF de miss√µes - Filtros: OMP='{omp_filtro}', Fonte='{fonte_filtro}'")
        
        # Buscar miss√µes com filtros
        query = Missao.query
        
        if omp_filtro:
            query = query.filter(Missao.opm_destino == omp_filtro)
        
        if fonte_filtro:
            query = query.filter(Missao.fonte_dinheiro == fonte_filtro)
        
        missoes = query.order_by(Missao.fonte_dinheiro, Missao.status.desc(), Missao.data_criacao.desc()).all()
        
        print(f"üìã {len(missoes)} miss√µes encontradas para exporta√ß√£o")
        
        # Organizar miss√µes por unidade
        missoes_por_unidade = {}
        for missao in missoes:
            unidade = missao.fonte_dinheiro
            if unidade not in missoes_por_unidade:
                missoes_por_unidade[unidade] = {
                    'previsao': [],
                    'autorizada': [],
                    'total_previsao': 0,
                    'total_autorizada': 0,
                    'total_geral': 0
                }
            
            missoes_por_unidade[unidade][missao.status].append(missao)
            
            if missao.status == 'previsao':
                missoes_por_unidade[unidade]['total_previsao'] += missao.valor
            else:
                missoes_por_unidade[unidade]['total_autorizada'] += missao.valor
            
            missoes_por_unidade[unidade]['total_geral'] += missao.valor
        
        # Criar buffer para o PDF
        buffer = io.BytesIO()
        
        # Configurar documento
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=50,
            leftMargin=50,
            topMargin=72,
            bottomMargin=18
        )
        
        elements = []
        styles = getSampleStyleSheet()
        
        # ‚úÖ ESTILOS CUSTOMIZADOS
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#1f4e79'),
            fontName='Helvetica-Bold'
        )
        
        subtitle_style = ParagraphStyle(
            'CustomSubtitle',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=20,
            alignment=TA_CENTER,
            textColor=colors.grey
        )
        
        unidade_style = ParagraphStyle(
            'UnidadeTitle',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=15,
            spaceBefore=20,
            textColor=colors.HexColor('#2c5aa0'),
            fontName='Helvetica-Bold'
        )
        
        # ‚úÖ CABE√áALHO
        elements.append(Paragraph("RELAT√ìRIO DE MISS√ïES POR UNIDADE", title_style))
        elements.append(Paragraph("CRPIV - Comando Regional de Pol√≠cia IV", subtitle_style))
        
        # Informa√ß√µes dos filtros
        filtro_info = []
        if omp_filtro:
            filtro_info.append(f"OPM Destino: {omp_filtro}")
        if fonte_filtro:
            filtro_info.append(f"Fonte: {fonte_filtro}")
        
        if filtro_info:
            elements.append(Paragraph(f"Filtros aplicados: {' | '.join(filtro_info)}", subtitle_style))
        
        elements.append(Paragraph(f"Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}", subtitle_style))
        elements.append(Spacer(1, 20))
        
        # ‚úÖ RESUMO EXECUTIVO
        total_missoes = len(missoes)
        total_previsoes = sum([m.valor for m in missoes if m.status == 'previsao'])
        total_autorizadas = sum([m.valor for m in missoes if m.status == 'autorizada'])
        total_geral = total_previsoes + total_autorizadas
        
        resumo_data = [
            ['RESUMO EXECUTIVO', ''],
            ['Total de Miss√µes:', f'{total_missoes:,}'],
            ['Total em Previs√£o:', f'R$ {total_previsoes:,.2f}'.replace('.', ',')],
            ['Total Autorizada:', f'R$ {total_autorizadas:,.2f}'.replace('.', ',')],
            ['Valor Total Geral:', f'R$ {total_geral:,.2f}'.replace('.', ',')],
            ['Unidades Envolvidas:', f'{len(missoes_por_unidade)} unidade(s)']
        ]
        
        resumo_table = Table(resumo_data, colWidths=[3.5*inch, 2.5*inch])
        resumo_table.setStyle(get_table_style_header())
        
        elements.append(resumo_table)
        elements.append(Spacer(1, 30))
        
        # ‚úÖ MISS√ïES POR UNIDADE
        for unidade, dados in missoes_por_unidade.items():
            # T√≠tulo da unidade
            elements.append(Paragraph(f"üìç {unidade}", unidade_style))
            
            # Resumo da unidade
            unidade_resumo = [
                ['Resumo da Unidade', 'Quantidade', 'Valor Total'],
                ['Miss√µes em Previs√£o', f"{len(dados['previsao'])}", f"R$ {dados['total_previsao']:,.2f}".replace('.', ',')],
                ['Miss√µes Autorizadas', f"{len(dados['autorizada'])}", f"R$ {dados['total_autorizada']:,.2f}".replace('.', ',')],
                ['TOTAL DA UNIDADE', f"{len(dados['previsao']) + len(dados['autorizada'])}", f"R$ {dados['total_geral']:,.2f}".replace('.', ',')]
            ]
            
            unidade_resumo_table = Table(unidade_resumo, colWidths=[3*inch, 1.5*inch, 2*inch])
            unidade_resumo_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#2c5aa0')),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 10),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 1), (-1, -1), 9),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('BACKGROUND', (0, -1), (-1, -1), colors.lightgrey),
                ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),
            ]))
            
            elements.append(unidade_resumo_table)
            elements.append(Spacer(1, 15))
            
            # ‚úÖ MISS√ïES AUTORIZADAS
            if dados['autorizada']:
                elements.append(Paragraph(f"‚úÖ Miss√µes Autorizadas ({len(dados['autorizada'])})", 
                                       ParagraphStyle('SubTitle', parent=styles['Normal'], fontSize=12, 
                                                    textColor=colors.HexColor('#28a745'), fontName='Helvetica-Bold')))
                
                auth_data = [['OPM Destino', 'Descri√ß√£o', 'Tipo', 'Per√≠odo', 'Valor']]
                
                for missao in dados['autorizada']:
                    auth_data.append([
                        missao.opm_destino,
                        (missao.descricao or '')[:35] + ('...' if len(missao.descricao or '') > 35 else ''),
                        missao.tipo,
                        missao.periodo or '-',
                        f'R$ {missao.valor:,.2f}'.replace('.', ',')
                    ])
                
                auth_table = Table(auth_data, colWidths=[1.2*inch, 2.3*inch, 1*inch, 1*inch, 1*inch])
                auth_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#28a745')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('ALIGN', (-1, 0), (-1, -1), 'RIGHT'),  # √öltima coluna √† direita
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 8),
                    ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.lightgreen),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ]))
                
                elements.append(auth_table)
                elements.append(Spacer(1, 10))
            
            # ‚úÖ MISS√ïES EM PREVIS√ÉO
            if dados['previsao']:
                elements.append(Paragraph(f"‚è≥ Miss√µes em Previs√£o ({len(dados['previsao'])})", 
                                       ParagraphStyle('SubTitle', parent=styles['Normal'], fontSize=12, 
                                                    textColor=colors.HexColor('#ffc107'), fontName='Helvetica-Bold')))
                
                prev_data = [['OPM Destino', 'Descri√ß√£o', 'Tipo', 'Per√≠odo', 'Valor']]
                
                for missao in dados['previsao']:
                    prev_data.append([
                        missao.opm_destino,
                        (missao.descricao or '')[:35] + ('...' if len(missao.descricao or '') > 35 else ''),
                        missao.tipo,
                        missao.periodo or '-',
                        f'R$ {missao.valor:,.2f}'.replace('.', ',')
                    ])
                
                prev_table = Table(prev_data, colWidths=[1.2*inch, 2.3*inch, 1*inch, 1*inch, 1*inch])
                prev_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#ffc107')),
                    ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('ALIGN', (-1, 0), (-1, -1), 'RIGHT'),
                    ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                    ('FONTSIZE', (0, 0), (-1, -1), 8),
                    ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                    ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
                    ('BACKGROUND', (0, 1), (-1, -1), colors.lightyellow),
                    ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                ]))
                
                elements.append(prev_table)
                elements.append(Spacer(1, 10))
            
            # Se n√£o h√° miss√µes na unidade
            if not dados['autorizada'] and not dados['previsao']:
                elements.append(Paragraph("‚ÑπÔ∏è Nenhuma miss√£o encontrada para esta unidade", 
                                       ParagraphStyle('Info', parent=styles['Normal'], fontSize=10, 
                                                    textColor=colors.grey, alignment=TA_CENTER)))
            
            elements.append(Spacer(1, 20))
        
        # ‚úÖ RODAP√â
        elements.append(Spacer(1, 30))
        elements.append(Paragraph("_" * 80, ParagraphStyle('Line', parent=styles['Normal'], fontSize=8, alignment=TA_CENTER)))
        elements.append(Paragraph(
            f"Relat√≥rio gerado automaticamente pelo Sistema CRPIV em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}",
            ParagraphStyle('Footer', parent=styles['Normal'], fontSize=8, alignment=TA_CENTER, textColor=colors.grey)
        ))
        
        # Gerar PDF
        doc.build(elements)
        buffer.seek(0)
        
        # Nome do arquivo com filtros
        nome_arquivo = "missoes_por_unidade"
        if fonte_filtro:
            nome_arquivo += f"_{fonte_filtro.replace(' ', '_')}"
        if omp_filtro:
            nome_arquivo += f"_destino_{omp_filtro.replace(' ', '_')}"
        nome_arquivo += f"_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
        
        print(f"‚úÖ PDF gerado: {nome_arquivo}")
        
        return Response(
            buffer.getvalue(),
            mimetype='application/pdf',
            headers={
                'Content-Disposition': f'attachment; filename={nome_arquivo}'
            }
        )
        
    except Exception as e:
        print(f"‚ùå Erro na exporta√ß√£o PDF de miss√µes: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao exportar relat√≥rio de miss√µes em PDF', 'error')
        return redirect(url_for('missoes'))


def get_table_style_header():
    """Estilo padr√£o para tabelas com cabe√ßalho"""
    return TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1f4e79')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
    ])


def create_missoes_table_style(header_color, body_color):
    """Criar estilo espec√≠fico para tabelas de miss√µes"""
    return TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor(header_color)),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.black if header_color == '#ffc107' else colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('ALIGN', (-1, 0), (-1, -1), 'RIGHT'),  # √öltima coluna √† direita
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, -1), 8),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
        ('BACKGROUND', (0, 1), (-1, -1), body_color),
        ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
    ])


@app.route('/salvar_distribuicao', methods=['POST'])
def salvar_distribuicao():
    """VERS√ÉO CORRIGIDA - Compat√≠vel com HTML"""
    print("=" * 50)
    print("üîç INICIANDO DISTRIBUI√á√ÉO - DEBUG ATIVO")
    print("=" * 50)
    
    try:
        # Debug: Mostrar TODOS os dados recebidos
        print("üìã TODOS OS DADOS DO FORMUL√ÅRIO:")
        for key, value in request.form.items():
            print(f"  '{key}' = '{value}'")
        print("-" * 30)
        
        orcamento_id = request.form['orcamento_id']
        print(f"üìä Or√ßamento ID: {orcamento_id}")
        
        orcamento = db.session.get(Orcamento, orcamento_id)
        if not orcamento:
            flash('Or√ßamento n√£o encontrado', 'error')
            return redirect(url_for('orcamento'))
        
        print(f"‚úÖ Or√ßamento encontrado: {orcamento.bimestre}/{orcamento.ano}")
        
        # Verificar saldos dispon√≠veis
        saldos_para_distribuir = calcular_saldos_para_distribuir()
        print("üí∞ Saldos dispon√≠veis:")
        for tipo, valor in saldos_para_distribuir.items():
            print(f"  {tipo}: R$ {valor:,.2f}")
        
        # ‚úÖ MAPEAMENTO CORRETO - HTML usa nomes sem acento
        mapeamento_html_para_python = {
            'DIARIAS': 'DI√ÅRIAS',
            'DERSO': 'DERSO', 
            'DIARIAS_PAV': 'DI√ÅRIAS PAV',
            'DERSO_PAV': 'DERSO PAV'
        }
        
        # Processar dados do formul√°rio
        totais_por_tipo = {
            'DI√ÅRIAS': 0,
            'DERSO': 0,
            'DI√ÅRIAS PAV': 0,
            'DERSO PAV': 0
        }
        
        distribuicoes_para_salvar = []
        
        for unidade in ['7¬∫ BPM', '8¬∫ BPM', 'CIPO']:
            for tipo_html in ['DIARIAS', 'DERSO', 'DIARIAS_PAV', 'DERSO_PAV']:
                # ‚úÖ USAR O NOME EXATO DO HTML
                campo_nome = f"{unidade}_{tipo_html}"
                valor_str = request.form.get(campo_nome, '0').strip()
                
                print(f"üîç {unidade} - {tipo_html}: '{valor_str}'")
                
                if not valor_str or valor_str == '0' or valor_str == '':
                    continue
                
                try:
                    valor_limpo = valor_str.replace(',', '.').replace(' ', '').replace('R$', '')
                    valor_float = float(valor_limpo)
                    
                    if valor_float > 0:
                        # ‚úÖ CONVERTER PARA O TIPO PYTHON CORRETO
                        tipo_python = mapeamento_html_para_python[tipo_html]
                        
                        print(f"‚úÖ Valor v√°lido: {campo_nome} = R$ {valor_float:,.2f}")
                        print(f"   Convertido para: {tipo_python}")
                        
                        totais_por_tipo[tipo_python] += valor_float
                        distribuicoes_para_salvar.append({
                            'unidade': unidade,
                            'tipo': tipo_python,  # Usar tipo Python
                            'valor': valor_float
                        })
                    else:
                        print(f"‚ö†Ô∏è Valor zero ignorado")
                        
                except (ValueError, TypeError) as e:
                    print(f"‚ùå Erro ao converter valor '{valor_str}': {e}")
                    flash(f'Valor inv√°lido para {unidade} - {tipo_html}: {valor_str}', 'error')
                    return redirect(url_for('distribuir', orcamento_id=orcamento_id))
        
        print("üìä Totais por tipo a distribuir:")
        for tipo, total in totais_por_tipo.items():
            print(f"  {tipo}: R$ {total:,.2f}")
        
        # Verificar se h√° distribui√ß√µes para salvar
        if not distribuicoes_para_salvar:
            print("‚ö†Ô∏è NENHUMA DISTRIBUI√á√ÉO V√ÅLIDA ENCONTRADA!")
            flash('‚ö†Ô∏è Nenhum valor v√°lido foi encontrado para distribuir. Verifique se preencheu os campos.', 'warning')
            return redirect(url_for('distribuir', orcamento_id=orcamento_id))
        
        # Valida√ß√£o de saldos
        print("üîç Validando saldos...")
        erros_validacao = []
        
        mapeamento_tipos_saldo = {
            'DI√ÅRIAS': 'diarias',
            'DERSO': 'derso', 
            'DI√ÅRIAS PAV': 'diarias_pav',
            'DERSO PAV': 'derso_pav'
        }
        
        for tipo_orcamento, tipo_saldo in mapeamento_tipos_saldo.items():
            disponivel = saldos_para_distribuir[tipo_saldo]
            solicitado = totais_por_tipo[tipo_orcamento]
            
            print(f"  {tipo_orcamento}: Solicitado R$ {solicitado:,.2f} / Dispon√≠vel R$ {disponivel:,.2f}")
            
            if solicitado > disponivel:
                erro_msg = (f"{tipo_orcamento}: Tentando distribuir R$ {solicitado:,.2f}, "
                           f"mas s√≥ h√° R$ {disponivel:,.2f} dispon√≠vel")
                erros_validacao.append(erro_msg)
                print(f"‚ùå {erro_msg}")
        
        if erros_validacao:
            print(f"‚ùå {len(erros_validacao)} erros de valida√ß√£o encontrados")
            for erro in erros_validacao:
                flash(erro, 'error')
            return redirect(url_for('distribuir', orcamento_id=orcamento_id))
        
        print("‚úÖ Valida√ß√£o passou - Salvando distribui√ß√µes...")
        
        # Limpar distribui√ß√µes anteriores
        distribuicoes_anteriores = Distribuicao.query.filter_by(orcamento_id=orcamento_id).count()
        print(f"üóëÔ∏è Removendo {distribuicoes_anteriores} distribui√ß√µes anteriores")
        
        Distribuicao.query.filter_by(orcamento_id=orcamento_id).delete()
        
        # Salvar novas distribui√ß√µes
        distribuicoes_salvas = 0
        for item in distribuicoes_para_salvar:
            distribuicao = Distribuicao(
                orcamento_id=orcamento_id,
                unidade=item['unidade'],
                tipo_orcamento=item['tipo'],  # J√° est√° no formato Python correto
                valor=item['valor']
            )
            db.session.add(distribuicao)
            distribuicoes_salvas += 1
            print(f"üíæ Salvando: {item['unidade']} - {item['tipo']} - R$ {item['valor']:,.2f}")
        
        print(f"üíæ Commitando {distribuicoes_salvas} distribui√ß√µes...")
        db.session.commit()
        # ‚úÖ REGISTRAR LOGS DAS DISTRIBUI√á√ïES
        for item in distribuicoes_para_salvar:
            registrar_movimentacao(
                tipo='distribuicao',
                descricao=f'Distribui√ß√£o para {item["unidade"]}',
                unidade_origem='CRPIV',
                unidade_destino=item['unidade'],
                tipo_orcamento=item['tipo'],
                valor=item['valor'],
                orcamento_id=orcamento_id
            )
        
        print("‚úÖ DISTRIBUI√á√ÉO CONCLU√çDA COM SUCESSO!")
        flash(f'‚úÖ Distribui√ß√£o salva com sucesso! {distribuicoes_salvas} itens distribu√≠dos.', 'success')
        
        return redirect(url_for('distribuir', orcamento_id=orcamento_id))
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO:")
        print(f"   Tipo: {type(e).__name__}")
        print(f"   Mensagem: {str(e)}")
        
        import traceback
        traceback.print_exc()
        
        db.session.rollback()
        flash(f'‚ùå Erro ao salvar distribui√ß√£o: {str(e)}', 'error')
        return redirect(url_for('distribuir', orcamento_id=orcamento_id))

@app.route('/relatorio_movimentacoes')
def relatorio_movimentacoes():
    """Relat√≥rio geral de movimenta√ß√µes - VERS√ÉO CORRIGIDA"""
    try:
        filtro_unidade = request.args.get('unidade_filtro', '')
        filtro_tipo = request.args.get('tipo_filtro', '')
        data_inicio = request.args.get('data_inicio', '')
        data_fim = request.args.get('data_fim', '')
        
        print(f"üîç Carregando relat√≥rio de movimenta√ß√µes...")
        print(f"   Filtros: unidade='{filtro_unidade}', tipo='{filtro_tipo}', inicio='{data_inicio}', fim='{data_fim}'")
        
        # ‚úÖ VERIFICAR SE A TABELA EXISTE E TEM DADOS
        try:
            total_registros = MovimentacaoOrcamentaria.query.count()
            print(f"üìä Total de registros na tabela MovimentacaoOrcamentaria: {total_registros}")
        except Exception as e:
            print(f"‚ùå Erro ao acessar tabela MovimentacaoOrcamentaria: {e}")
            # Se a tabela n√£o existe, usar dados simulados
            return relatorio_movimentacoes_simulado(filtro_unidade, filtro_tipo, data_inicio, data_fim)
        
        # ‚úÖ CONSTRUIR QUERY COM FILTROS
        query = MovimentacaoOrcamentaria.query
        
        # Aplicar filtros
        if filtro_unidade:
            query = query.filter(
                or_(
                    MovimentacaoOrcamentaria.unidade_origem == filtro_unidade,
                    MovimentacaoOrcamentaria.unidade_destino == filtro_unidade
                )
            )
            print(f"   Aplicado filtro de unidade: {filtro_unidade}")
        
        if filtro_tipo:
            query = query.filter(MovimentacaoOrcamentaria.tipo == filtro_tipo)
            print(f"   Aplicado filtro de tipo: {filtro_tipo}")
        
        if data_inicio:
            try:
                data_inicio_obj = datetime.strptime(data_inicio, '%Y-%m-%d')
                query = query.filter(MovimentacaoOrcamentaria.data_movimentacao >= data_inicio_obj)
                print(f"   Aplicado filtro data in√≠cio: {data_inicio}")
            except ValueError:
                print(f"   Erro ao converter data in√≠cio: {data_inicio}")
        
        if data_fim:
            try:
                data_fim_obj = datetime.strptime(data_fim, '%Y-%m-%d')
                query = query.filter(MovimentacaoOrcamentaria.data_movimentacao <= data_fim_obj)
                print(f"   Aplicado filtro data fim: {data_fim}")
            except ValueError:
                print(f"   Erro ao converter data fim: {data_fim}")
        
        # ‚úÖ EXECUTAR QUERY E BUSCAR DADOS
        movimentacoes = query.order_by(MovimentacaoOrcamentaria.data_movimentacao.desc()).all()
        print(f"üìã Movimenta√ß√µes encontradas: {len(movimentacoes)}")
        
        # ‚úÖ LOG DETALHADO DAS MOVIMENTA√á√ïES
        if movimentacoes:
            print("üìã Primeiras 5 movimenta√ß√µes:")
            for i, mov in enumerate(movimentacoes[:5]):
                print(f"  {i+1}. {mov.data_movimentacao} - {mov.tipo} - {mov.unidade_origem} ‚Üí {mov.unidade_destino} - R$ {mov.valor or 0:,.2f}")
        else:
            print("‚ö†Ô∏è Nenhuma movimenta√ß√£o encontrada!")
        
        # Estat√≠sticas
        total_movimentacoes = len(movimentacoes)
        valor_total = sum([m.valor for m in movimentacoes if m.valor])
        
        print(f"üìä Estat√≠sticas calculadas:")
        print(f"   Total de movimenta√ß√µes: {total_movimentacoes}")
        print(f"   Valor total: R$ {valor_total:,.2f}")
        
        tipos_movimento = ['orcamento_criado', 'distribuicao', 'autorizacao_missao', 
                          'transferencia_entre_unidades', 'nova_distribuicao_crpiv', 'recolhimento']
        
        filtros_retorno = {
            'unidade_filtro': filtro_unidade,
            'tipo_filtro': filtro_tipo,
            'data_inicio': data_inicio,
            'data_fim': data_fim
        }
        
        print(f"üéØ Renderizando template com {len(movimentacoes)} movimenta√ß√µes")
        
        return render_template('relatorio_movimentacoes.html',
                             movimentacoes=movimentacoes,
                             total_movimentacoes=total_movimentacoes,
                             valor_total=valor_total,
                             unidades=UNIDADES,
                             tipos_movimento=tipos_movimento,
                             filtros=filtros_retorno)
                             
    except Exception as e:
        print(f"‚ùå Erro no relat√≥rio: {e}")
        import traceback
        traceback.print_exc()
        flash('Erro ao carregar relat√≥rio de movimenta√ß√µes', 'error')
        
        # Retornar template vazio em caso de erro
        return render_template('relatorio_movimentacoes.html', 
                             movimentacoes=[],
                             total_movimentacoes=0,
                             valor_total=0,
                             unidades=UNIDADES,
                             tipos_movimento=[],
                             filtros={
                                 'unidade_filtro': '',
                                 'tipo_filtro': '',
                                 'data_inicio': '',
                                 'data_fim': ''
                             })


def relatorio_movimentacoes_simulado(filtro_unidade='', filtro_tipo='', data_inicio='', data_fim=''):
    """Fun√ß√£o auxiliar para dados simulados quando tabela n√£o existe"""
    print("üìä Gerando dados simulados para movimenta√ß√µes...")
    
    try:
        # Simular movimenta√ß√µes baseadas em dados existentes
        movimentacoes_simuladas = []
        
        # 1. Simular cria√ß√£o de or√ßamentos
        orcamentos = Orcamento.query.all()
        for orc in orcamentos:
            class MovimentacaoSimulada:
                def __init__(self, data, tipo, descricao, origem=None, destino=None, tipo_orc=None, valor=None, usuario="Sistema"):
                    self.data_movimentacao = data
                    self.tipo = tipo
                    self.descricao = descricao  
                    self.unidade_origem = origem
                    self.unidade_destino = destino
                    self.tipo_orcamento = tipo_orc
                    self.valor = valor
                    self.usuario = usuario
            
            mov = MovimentacaoSimulada(
                data=orc.data_criacao,
                tipo='orcamento_criado',
                descricao=f'Or√ßamento criado: {orc.bimestre}/{orc.ano}',
                valor=sum([orc.diarias, orc.derso, orc.diarias_pav, orc.derso_pav])
            )
            movimentacoes_simuladas.append(mov)
        
        # 2. Simular distribui√ß√µes
        distribuicoes = Distribuicao.query.all()
        for dist in distribuicoes:
            mov = MovimentacaoSimulada(
                data=dist.data_distribuicao,
                tipo='distribuicao',
                descricao=f'Distribui√ß√£o para {dist.unidade}',
                origem='CRPIV',
                destino=dist.unidade,
                tipo_orc=dist.tipo_orcamento,
                valor=dist.valor
            )
            movimentacoes_simuladas.append(mov)
        
        # 3. Simular autoriza√ß√µes
        missoes = Missao.query.filter_by(status='autorizada').all()
        for missao in missoes:
            mov = MovimentacaoSimulada(
                data=missao.data_autorizacao or missao.data_criacao,
                tipo='autorizacao_missao',
                descricao=f'Miss√£o autorizada: {missao.descricao[:30]}...',
                origem=missao.fonte_dinheiro,
                destino=missao.omp_destino,
                tipo_orc=missao.tipo,
                valor=missao.valor
            )
            movimentacoes_simuladas.append(mov)
        
        # Ordenar por data
        movimentacoes_simuladas.sort(key=lambda x: x.data_movimentacao, reverse=True)
        
        # Aplicar filtros
        if filtro_unidade:
            movimentacoes_simuladas = [
                m for m in movimentacoes_simuladas 
                if m.unidade_origem == filtro_unidade or m.unidade_destino == filtro_unidade
            ]
        
        if filtro_tipo:
            movimentacoes_simuladas = [
                m for m in movimentacoes_simuladas 
                if m.tipo == filtro_tipo
            ]
        
        total_movimentacoes = len(movimentacoes_simuladas)
        valor_total = sum([m.valor for m in movimentacoes_simuladas if m.valor])
        
        print(f"‚úÖ Dados simulados: {total_movimentacoes} movimenta√ß√µes, valor total: R$ {valor_total:,.2f}")
        
        tipos_movimento = ['orcamento_criado', 'distribuicao', 'autorizacao_missao']
        
        return render_template('relatorio_movimentacoes.html',
                             movimentacoes=movimentacoes_simuladas,
                             total_movimentacoes=total_movimentacoes,
                             valor_total=valor_total,
                             unidades=UNIDADES,
                             tipos_movimento=tipos_movimento,
                             filtros={
                                 'unidade_filtro': filtro_unidade,
                                 'tipo_filtro': filtro_tipo,
                                 'data_inicio': data_inicio,
                                 'data_fim': data_fim
                             })
                             
    except Exception as e:
        print(f"‚ùå Erro ao gerar dados simulados: {e}")
        return render_template('relatorio_movimentacoes.html', 
                             movimentacoes=[],
                             total_movimentacoes=0,
                             valor_total=0,
                             unidades=UNIDADES,
                             tipos_movimento=[],
                             filtros={})


@app.route('/exportar_movimentacoes_csv')
def exportar_movimentacoes_csv():
    """Exportar movimenta√ß√µes para CSV"""
    try:
        movimentacoes = MovimentacaoOrcamentaria.query.order_by(
            MovimentacaoOrcamentaria.data_movimentacao.desc()
        ).all()
        
        output = io.StringIO()
        writer = csv.writer(output, delimiter=';')
        
        # Cabe√ßalho
        writer.writerow([
            'Data', 'Tipo', 'Descri√ß√£o', 'Unidade Origem', 'Unidade Destino',
            'Tipo Or√ßamento', 'Valor', 'Usu√°rio', 'Or√ßamento ID', 'Miss√£o ID'
        ])
        
        # Dados
        for mov in movimentacoes:
            writer.writerow([
                mov.data_movimentacao.strftime('%d/%m/%Y %H:%M'),
                mov.tipo,
                mov.descricao or '',
                mov.unidade_origem or '',
                mov.unidade_destino or '',
                mov.tipo_orcamento or '',
                f"{mov.valor:,.2f}".replace('.', ',') if mov.valor else '',
                mov.usuario,
                mov.orcamento_id or '',
                mov.missao_id or ''
            ])
        
        output.seek(0)
        
        return Response(
            output.getvalue(),
            mimetype='text/csv; charset=utf-8',
            headers={
                'Content-Disposition': 'attachment; filename=movimentacoes_orcamentarias.csv'
            }
        )
        
    except Exception as e:
        print(f"‚ùå Erro na exporta√ß√£o: {e}")
        flash('Erro ao exportar relat√≥rio', 'error')
        return redirect(url_for('relatorio_movimentacoes'))

# ‚úÖ FUN√á√ÉO DE DEBUG MELHORADA
def debug_distribuicao_completo():
    """Fun√ß√£o para diagnosticar todos os problemas de distribui√ß√£o"""
    print("=" * 60)
    print("üîç DIAGN√ìSTICO COMPLETO DO SISTEMA DE DISTRIBUI√á√ÉO")
    print("=" * 60)
    
    try:
        # 1. Verificar or√ßamentos
        orcamentos = Orcamento.query.all()
        print(f"üìä Total de or√ßamentos: {len(orcamentos)}")
        
        total_geral = {'diarias': 0, 'derso': 0, 'diarias_pav': 0, 'derso_pav': 0}
        for orc in orcamentos:
            total_geral['diarias'] += orc.diarias or 0
            total_geral['derso'] += orc.derso or 0
            total_geral['diarias_pav'] += orc.diarias_pav or 0
            total_geral['derso_pav'] += orc.derso_pav or 0
        
        print("üí∞ Or√ßamento total base:")
        for tipo, valor in total_geral.items():
            print(f"  {tipo}: R$ {valor:,.2f}")
        
        # 2. Verificar complementa√ß√µes
        complementacoes = ComplementacaoOrcamento.query.all()
        print(f"üìà Total de complementa√ß√µes: {len(complementacoes)}")
        
        # 3. Verificar distribui√ß√µes
        distribuicoes = Distribuicao.query.all()
        print(f"üì§ Total de distribui√ß√µes: {len(distribuicoes)}")
        
        total_distribuido = sum([d.valor for d in distribuicoes])
        print(f"üí∏ Total distribu√≠do: R$ {total_distribuido:,.2f}")
        
        # 4. Verificar miss√µes
        missoes_prev = Missao.query.filter_by(status='previsao').all()
        missoes_aut = Missao.query.filter_by(status='autorizada').all()
        
        print(f"üìã Miss√µes em previs√£o: {len(missoes_prev)}")
        print(f"‚úÖ Miss√µes autorizadas: {len(missoes_aut)}")
        
        total_prev = sum([m.valor for m in missoes_prev])
        total_aut = sum([m.valor for m in missoes_aut])
        
        print(f"üí∞ Valor previs√µes: R$ {total_prev:,.2f}")
        print(f"üí∞ Valor autorizadas: R$ {total_aut:,.2f}")
        
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå Erro no diagn√≥stico: {e}")


@app.route('/saldos_bimestre')
def saldos_bimestre():
    try:
        saldos = calcular_saldo_por_bimestre()
        totais_geral = calcular_orcamento_total_todos_bimestres()
        return render_template('saldos_bimestre.html', 
                             saldos_bimestre=saldos,
                             totais_geral=totais_geral)
    except Exception as e:
        print(f"‚ùå Erro em saldos_bimestre: {e}")
        flash('Erro ao carregar saldos por bimestre', 'error')
        return render_template('saldos_bimestre.html', 
                             saldos_bimestre=[],
                             totais_geral={'diarias': 0, 'derso': 0, 'diarias_pav': 0, 'derso_pav': 0})


@app.route('/complementacao', methods=['GET', 'POST'])
def complementacao():
    if request.method == 'POST':
        nova_complementacao = ComplementacaoOrcamento(
            orcamento_id=int(request.form['orcamento_id']),
            processo_sei=request.form['processo_sei'],
            tipo_orcamento=request.form['tipo_orcamento'],
            valor=float(request.form['valor']),
            descricao=request.form.get('descricao', '')
        )
        
        db.session.add(nova_complementacao)
        db.session.commit()
        
        # Registrar log
        registrar_movimentacao(
            tipo='complementacao_orcamento',
            descricao=f'Complementa√ß√£o or√ßament√°ria: {nova_complementacao.tipo_orcamento}',
            tipo_orcamento=nova_complementacao.tipo_orcamento,
            valor=nova_complementacao.valor,
            orcamento_id=nova_complementacao.orcamento_id
        )
        
        flash('Complementa√ß√£o or√ßament√°ria cadastrada com sucesso!', 'success')
        return redirect(url_for('complementacao'))
    
    orcamentos = Orcamento.query.order_by(Orcamento.data_criacao.desc()).all()
    complementacoes = ComplementacaoOrcamento.query.order_by(ComplementacaoOrcamento.data_criacao.desc()).all()
    
    return render_template('complementacao.html', 
                         orcamentos=orcamentos,
                         complementacoes=complementacoes,
                         tipos=TIPOS_ORCAMENTO)

@app.route('/editar_complementacao/<int:comp_id>', methods=['GET', 'POST'])
def editar_complementacao(comp_id):
    complementacao = db.session.get(ComplementacaoOrcamento, comp_id) or abort(404)
    
    if request.method == 'POST':
        complementacao.orcamento_id = int(request.form['orcamento_id'])
        complementacao.processo_sei = request.form['processo_sei']
        complementacao.tipo_orcamento = request.form['tipo_orcamento']
        complementacao.valor = float(request.form['valor'])
        complementacao.descricao = request.form.get('descricao', '')
        
        db.session.commit()
        flash('Complementa√ß√£o atualizada com sucesso!', 'success')
        return redirect(url_for('complementacao'))
    
    orcamentos = Orcamento.query.order_by(Orcamento.data_criacao.desc()).all()
    return render_template('editar_complementacao.html', 
                         complementacao=complementacao,
                         orcamentos=orcamentos,
                         tipos=TIPOS_ORCAMENTO)

@app.route('/remover_complementacao/<int:comp_id>')
def remover_complementacao(comp_id):
    complementacao = db.session.get(ComplementacaoOrcamento, comp_id) or abort(404)
    db.session.delete(complementacao)
    db.session.commit()
    flash('Complementa√ß√£o removida com sucesso!', 'success')
    return redirect(url_for('complementacao'))

@app.route('/distribuir/<int:orcamento_id>')
def distribuir(orcamento_id):
    """P√°gina de distribui√ß√£o com saldos CORRETOS"""
    try:
        orcamento = db.session.get(Orcamento, orcamento_id)
        if not orcamento:
            flash('Or√ßamento n√£o encontrado', 'error')
            return redirect(url_for('orcamento'))
        
        print(f"üîç Carregando p√°gina de distribui√ß√£o - Or√ßamento {orcamento_id}")
        
        # ‚úÖ CALCULAR SALDOS DISPON√çVEIS (n√£o total bruto)
        orcamento_totais = calcular_orcamento_total_com_complementacao(orcamento)
        
        # Buscar distribui√ß√µes existentes
        distribuicoes = Distribuicao.query.filter_by(orcamento_id=orcamento_id).all()
        
        print(f"üìã Distribui√ß√µes existentes: {len(distribuicoes)}")
        
        return render_template('distribuir.html', 
                             orcamento=orcamento, 
                             orcamento_totais=orcamento_totais,  # ‚úÖ Saldos dispon√≠veis
                             distribuicoes=distribuicoes,
                             unidades=UNIDADES[1:],  # Excluir CRPIV
                             tipos=TIPOS_ORCAMENTO)
                             
    except Exception as e:
        print(f"‚ùå Erro na rota distribuir: {e}")
        flash('Erro ao carregar p√°gina de distribui√ß√£o', 'error')
        return redirect(url_for('orcamento'))



@app.route('/missoes', methods=['GET', 'POST'])
def missoes():
    # Filtros
    opm_filtro = request.args.get('opm_filtro', '')
    fonte_filtro = request.args.get('fonte_filtro', '')
    
    if request.method == 'POST':
        nova_missao = Missao(
            fonte_dinheiro=request.form['fonte_dinheiro'],
            opm_destino=request.form['opm_destino'],
            processo_sei=request.form['processo_sei'],
            descricao=request.form['descricao'],
            periodo=request.form['periodo'],
            mes=request.form['mes'],
            tipo=request.form['tipo'],
            valor=float(request.form['valor']),
            numero_autorizacao=request.form.get('numero_autorizacao', ''),
            status=request.form['status']
        )
        
        if nova_missao.status == 'autorizada':
            nova_missao.data_autorizacao = datetime.utcnow()
        
        db.session.add(nova_missao)
        db.session.commit()
        flash('Miss√£o cadastrada com sucesso!', 'success')
        return redirect(url_for('missoes'))
    
    # Query com filtros
    query = Missao.query
    if opm_filtro:
        query = query.filter(Missao.opm_destino == opm_filtro)
    if fonte_filtro:
        query = query.filter(Missao.fonte_dinheiro == fonte_filtro)
    
    missoes = query.order_by(Missao.data_criacao.desc()).all()
    
    return render_template('missoes.html', 
                         missoes=missoes,
                         unidades=UNIDADES,
                         tipos=TIPOS_ORCAMENTO,
                         meses=MESES,
                         opm_filtro=opm_filtro,
                         fonte_filtro=fonte_filtro)

@app.route('/editar_missao/<int:missao_id>', methods=['GET', 'POST'])
def editar_missao(missao_id):
    missao = db.session.get(Missao, missao_id) or abort(404)
    
    if request.method == 'POST':
        valor_anterior = missao.valor
        novo_valor = float(request.form['valor'])
        
        missao.fonte_dinheiro = request.form['fonte_dinheiro']
        missao.opm_destino = request.form['opm_destino']
        missao.processo_sei = request.form['processo_sei']
        missao.descricao = request.form['descricao']
        missao.periodo = request.form['periodo']
        missao.mes = request.form['mes']
        missao.tipo = request.form['tipo']
        missao.valor = novo_valor
        missao.numero_autorizacao = request.form.get('numero_autorizacao', '')
        
        if valor_anterior != novo_valor:
            if missao.observacoes:
                missao.observacoes += f"\n[{datetime.now().strftime('%d/%m/%Y %H:%M')}] Valor alterado de R$ {valor_anterior:,.2f} para R$ {novo_valor:,.2f}"
            else:
                missao.observacoes = f"[{datetime.now().strftime('%d/%m/%Y %H:%M')}] Valor alterado de R$ {valor_anterior:,.2f} para R$ {novo_valor:,.2f}"
        
        db.session.commit()
        flash('Miss√£o atualizada com sucesso!', 'success')
        return redirect(url_for('missoes'))
    
    return render_template('editar_missao.html', 
                         missao=missao,
                         unidades=UNIDADES,
                         tipos=TIPOS_ORCAMENTO,
                         meses=MESES)

@app.route('/remover_missao/<int:missao_id>', methods=['POST'])
def remover_missao(missao_id):
    missao = db.session.get(Missao, missao_id)
    if not missao:
        flash('Miss√£o n√£o encontrada', 'error')
        return redirect(url_for('missoes'))

    try:
        db.session.delete(missao)
        db.session.commit()
        flash('Miss√£o removida com sucesso!', 'success')
    except Exception as e:
        db.session.rollback()
        flash('Erro ao remover miss√£o.', 'error')
        print(f"Erro ao remover miss√£o: {e}")

    return redirect(url_for('missoes'))

@app.route('/relatorios')
def relatorios():
    # Filtros
    unidade_filtro = request.args.get('unidade_filtro', '')
    
    # Usar or√ßamento total de todos os bimestres
    totais_geral = calcular_orcamento_total_todos_bimestres()
    tipos_valores = [
        totais_geral['diarias'],
        totais_geral['derso'],
        totais_geral['diarias_pav'],
        totais_geral['derso_pav']
    ]
    
    # Gr√°fico por unidade (gastos autorizados) - com filtro
    gastos_unidade = {}
    for unidade in UNIDADES:
        if unidade_filtro and unidade != unidade_filtro:
            continue
            
        total_gasto = db.session.query(Missao).filter_by(
            fonte_dinheiro=unidade, 
            status='autorizada'
        ).with_entities(db.func.sum(Missao.valor)).scalar() or 0
        gastos_unidade[unidade] = total_gasto
    
    # Gr√°fico por status - considerando filtro de unidade
    query_previsoes = db.session.query(Missao).filter_by(status='previsao')
    query_autorizadas = db.session.query(Missao).filter_by(status='autorizada')
    
    if unidade_filtro:
        query_previsoes = query_previsoes.filter(Missao.fonte_dinheiro == unidade_filtro)
        query_autorizadas = query_autorizadas.filter(Missao.fonte_dinheiro == unidade_filtro)
    
    total_previsoes = query_previsoes.with_entities(db.func.sum(Missao.valor)).scalar() or 0
    total_autorizadas = query_autorizadas.with_entities(db.func.sum(Missao.valor)).scalar() or 0
    
    dados = {
        'tipos_orcamento': TIPOS_ORCAMENTO,
        'tipos_valores': tipos_valores,
        'unidades': list(gastos_unidade.keys()),
        'gastos_unidade': list(gastos_unidade.values()),
        'status_labels': ['Previs√µes', 'Autorizadas'],
        'status_valores': [total_previsoes, total_autorizadas],
        'unidade_filtro': unidade_filtro
    }
    
    return render_template('relatorios.html', dados=dados, unidades_filtro=UNIDADES)


# Rotas para Or√ßamentos
@app.route('/editar_orcamento/<int:orcamento_id>', methods=['GET', 'POST'])
def editar_orcamento(orcamento_id):
    orcamento = db.session.get(Orcamento, orcamento_id) or abort(404)

    
    if request.method == 'POST':
        # Atualizar campos b√°sicos
        orcamento.bimestre = request.form['bimestre']
        orcamento.ano = int(request.form['ano'])
        orcamento.diarias = float(request.form['diarias'])
        orcamento.derso = float(request.form['derso'])
        orcamento.diarias_pav = float(request.form['diarias_pav'])
        orcamento.derso_pav = float(request.form['derso_pav'])
        
        # Atualizar datas se existirem os campos
        if 'data_inicio' in request.form and request.form['data_inicio']:
            orcamento.data_inicio = datetime.strptime(request.form['data_inicio'], '%Y-%m-%d').date()
        if 'data_fim' in request.form and request.form['data_fim']:
            orcamento.data_fim = datetime.strptime(request.form['data_fim'], '%Y-%m-%d').date()
        
        db.session.commit()
        flash('Or√ßamento atualizado com sucesso!', 'success')
        return redirect(url_for('orcamento'))
    
    return render_template('editar_orcamento.html', 
                         orcamento=orcamento,
                         bimestres=BIMESTRES)

@app.route('/remover_orcamento/<int:orcamento_id>')
def remover_orcamento(orcamento_id):
    orcamento = db.session.get(Orcamento, orcamento_id) or abort(404)

    
    # Verificar se h√° distribui√ß√µes ou complementa√ß√µes associadas
    distribuicoes = Distribuicao.query.filter_by(orcamento_id=orcamento_id).count()
    complementacoes = ComplementacaoOrcamento.query.filter_by(orcamento_id=orcamento_id).count()
    
    if distribuicoes > 0 or complementacoes > 0:
        flash(f'N√£o √© poss√≠vel remover este or√ßamento. Existem {distribuicoes} distribui√ß√µes e {complementacoes} complementa√ß√µes associadas.', 'error')
        return redirect(url_for('orcamento'))
    
    db.session.delete(orcamento)
    db.session.commit()
    flash('Or√ßamento removido com sucesso!', 'success')
    return redirect(url_for('orcamento'))

@app.route('/debug_recolhimento/<int:orcamento_id>')
def debug_recolhimento(orcamento_id):
    """Rota de debug para testar c√°lculos de recolhimento"""
    try:
        print(f"üîç DEBUG RECOLHIMENTO - Or√ßamento {orcamento_id}")
        
        # Verificar or√ßamento
        orcamento = db.session.get(Orcamento, orcamento_id)
        if not orcamento:
            return {"erro": "Or√ßamento n√£o encontrado"}
        
        print(f"‚úÖ Or√ßamento: {orcamento.bimestre}/{orcamento.ano}")
        
        # Verificar distribui√ß√µes
        distribuicoes = Distribuicao.query.filter_by(orcamento_id=orcamento_id).all()
        print(f"üìä Distribui√ß√µes encontradas: {len(distribuicoes)}")
        
        for dist in distribuicoes:
            print(f"  {dist.unidade} - {dist.tipo_orcamento}: R$ {dist.valor:,.2f}")
        
        # Verificar miss√µes autorizadas
        missoes = Missao.query.filter_by(status='autorizada').all()
        print(f"üéØ Miss√µes autorizadas: {len(missoes)}")
        
        # Calcular saldos
        saldos = calcular_saldos_para_recolher_bimestre_corrigido(orcamento_id)
        
        return {
            "status": "OK",
            "orcamento": f"{orcamento.bimestre}/{orcamento.ano}",
            "distribuicoes": len(distribuicoes),
            "missoes_autorizadas": len(missoes),
            "saldos_detalhados": saldos
        }
        
    except Exception as e:
        print(f"‚ùå Erro no debug: {e}")
        import traceback
        traceback.print_exc()
        return {"erro": str(e)}

if __name__ == '__main__':
    create_tables()
    app.run(debug=True)
